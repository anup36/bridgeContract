/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestToken,
  TestTokenInterface,
} from "../../../contracts/testToken.sol/TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimal",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "addAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "blacklistAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "blacklisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "removeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "removeBlacklistedAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "time",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014fa380380620014fa83398101604081905262000034916200032b565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35082516200008a906006906020860190620001d2565b508151620000a0906007906020850190620001d2565b506008805460ff191660ff8381169190911791829055620000e1913391620000cb9116600a62000414565b620000db90631dcd65006200050c565b620000ea565b50505062000597565b6001600160a01b038216620001455760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060056000828254620001599190620003ac565b90915550506001600160a01b0382166000908152600160205260408120805483929062000188908490620003ac565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001e0906200052e565b90600052602060002090601f0160209004810192826200020457600085556200024f565b82601f106200021f57805160ff19168380011785556200024f565b828001600101855582156200024f579182015b828111156200024f57825182559160200191906001019062000232565b506200025d92915062000261565b5090565b5b808211156200025d576000815560010162000262565b600082601f83011262000289578081fd5b81516001600160401b0380821115620002a657620002a662000581565b604051601f8301601f19908116603f01168101908282118183101715620002d157620002d162000581565b81604052838152602092508683858801011115620002ed578485fd5b8491505b83821015620003105785820183015181830184015290820190620002f1565b838211156200032157848385830101525b9695505050505050565b60008060006060848603121562000340578283fd5b83516001600160401b038082111562000357578485fd5b620003658783880162000278565b945060208601519150808211156200037b578384fd5b506200038a8682870162000278565b925050604084015160ff81168114620003a1578182fd5b809150509250925092565b60008219821115620003c257620003c26200056b565b500190565b80825b6001808611620003db57506200040b565b818704821115620003f057620003f06200056b565b80861615620003fe57918102915b9490941c938002620003ca565b94509492505050565b60006200042860001960ff8516846200042f565b9392505050565b600082620004405750600162000428565b816200044f5750600062000428565b81600181146200046857600281146200047357620004a7565b600191505062000428565b60ff8411156200048757620004876200056b565b6001841b915084821115620004a057620004a06200056b565b5062000428565b5060208310610133831016604e8410600b8410161715620004df575081810a83811115620004d957620004d96200056b565b62000428565b620004ee8484846001620003c7565b8086048211156200050357620005036200056b565b02949350505050565b60008160001904831182151516156200052957620005296200056b565b500290565b6002810460018216806200054357607f821691505b602082108114156200056557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610f5380620005a76000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806370480275116100b8578063a457c2d71161007c578063a457c2d71461026c578063a9059cbb1461027f578063dbac26e914610292578063dd62ed3e146102b5578063f2fde38b146102c8578063f3290d75146102db57610137565b8063704802751461021b57806370a082311461022e578063715018a6146102415780638da5cb5b1461024957806395d89b411461026457610137565b806323b872dd116100ff57806323b872dd146101aa57806324d7806c146101bd578063313ce567146101e05780633328b721146101f5578063395093511461020857610137565b806306fdde031461013c578063095ea7b31461015a57806316ada5471461017d5780631785f53c1461018d57806318160ddd146101a2575b600080fd5b6101446102ee565b6040516101519190610e36565b60405180910390f35b61016d610168366004610e0d565b610380565b6040519015158152602001610151565b425b604051908152602001610151565b6101a061019b366004610d7f565b610398565b005b60055461017f565b61016d6101b8366004610dd2565b610441565b61016d6101cb366004610d7f565b60036020526000908152604090205460ff1681565b60085460405160ff9091168152602001610151565b6101a0610203366004610d7f565b6104ba565b61016d610216366004610e0d565b6105a6565b6101a0610229366004610d7f565b6105c8565b61017f61023c366004610d7f565b610672565b6101a0610691565b6000546040516001600160a01b039091168152602001610151565b610144610705565b61016d61027a366004610e0d565b610714565b61016d61028d366004610e0d565b61078f565b61016d6102a0366004610d7f565b60026020526000908152604090205460ff1681565b61017f6102c3366004610da0565b61079d565b6101a06102d6366004610d7f565b6107c8565b6101a06102e9366004610d7f565b6108b2565b6060600680546102fd90610ee2565b80601f016020809104026020016040519081016040528092919081815260200182805461032990610ee2565b80156103765780601f1061034b57610100808354040283529160200191610376565b820191906000526020600020905b81548152906001019060200180831161035957829003601f168201915b5050505050905090565b60003361038e8185856109a5565b5060019392505050565b6000546001600160a01b031633146103cb5760405162461bcd60e51b81526004016103c290610e89565b60405180910390fd5b6001600160a01b03811660009081526003602052604090205460ff166104205760405162461bcd60e51b815260206004820152600a602482015269103737ba1020b236b4b760b11b60448201526064016103c2565b6001600160a01b03166000908152600360205260409020805460ff19169055565b6001600160a01b03831660009081526002602052604081205460ff16156104985760405162461bcd60e51b815260206004820152600b60248201526a189b1858dadb1a5cdd195960aa1b60448201526064016103c2565b336104a4858285610ac9565b6104af858585610b43565b506001949350505050565b3360009081526003602052604090205460ff16806104e257506000546001600160a01b031633145b61052a5760405162461bcd60e51b81526020600482015260196024820152780818d85b1b195c881a5cc81b9bdd08185d5d1a1bdc9a5cd959603a1b60448201526064016103c2565b6001600160a01b03811660009081526002602052604090205460ff166105855760405162461bcd60e51b815260206004820152601060248201526f081b9bdd08189b1858dadb1a5cdd195960821b60448201526064016103c2565b6001600160a01b03166000908152600260205260409020805460ff19169055565b60003361038e8185856105b9838361079d565b6105c39190610ebe565b6109a5565b6000546001600160a01b031633146105f25760405162461bcd60e51b81526004016103c290610e89565b6001600160a01b03811660009081526003602052604090205460ff161561064e5760405162461bcd60e51b815260206004820152601060248201526f30b63932b0b23c9030b71020b236b4b760811b60448201526064016103c2565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b6001600160a01b0381166000908152600160205260409020545b919050565b6000546001600160a01b031633146106bb5760405162461bcd60e51b81526004016103c290610e89565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6060600780546102fd90610ee2565b60003381610722828661079d565b9050838110156107825760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103c2565b6104af82868684036109a5565b60003361038e818585610b43565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b6000546001600160a01b031633146107f25760405162461bcd60e51b81526004016103c290610e89565b6001600160a01b0381166108575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103c2565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526003602052604090205460ff16806108da57506000546001600160a01b031633145b6109225760405162461bcd60e51b81526020600482015260196024820152780818d85b1b195c881a5cc81b9bdd08185d5d1a1bdc9a5cd959603a1b60448201526064016103c2565b6001600160a01b03811660009081526002602052604090205460ff16156109815760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e48189b1858dadb1a5cdd1959606a1b60448201526064016103c2565b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6001600160a01b038316610a075760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103c2565b6001600160a01b038216610a685760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103c2565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610ad5848461079d565b90506000198114610b3d5781811015610b305760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103c2565b610b3d84848484036109a5565b50505050565b6001600160a01b03831660009081526002602052604090205460ff1615610b9a5760405162461bcd60e51b815260206004820152600b60248201526a189b1858dadb1a5cdd195960aa1b60448201526064016103c2565b6001600160a01b038316610bfe5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103c2565b6001600160a01b038216610c605760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103c2565b6001600160a01b03831660009081526001602052604090205481811015610cd85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103c2565b6001600160a01b03808516600090815260016020526040808220858503905591851681529081208054849290610d0f908490610ebe565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d5b91815260200190565b60405180910390a3610b3d565b80356001600160a01b038116811461068c57600080fd5b600060208284031215610d90578081fd5b610d9982610d68565b9392505050565b60008060408385031215610db2578081fd5b610dbb83610d68565b9150610dc960208401610d68565b90509250929050565b600080600060608486031215610de6578081fd5b610def84610d68565b9250610dfd60208501610d68565b9150604084013590509250925092565b60008060408385031215610e1f578182fd5b610e2883610d68565b946020939093013593505050565b6000602080835283518082850152825b81811015610e6257858101830151858201604001528201610e46565b81811115610e735783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610edd57634e487b7160e01b81526011600452602481fd5b500190565b600281046001821680610ef657607f821691505b60208210811415610f1757634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220f11545d71f480ef61adc0d3ca8fbd07f45ee335f93fc6bad4f9e7acf41d98ec164736f6c63430008020033";

type TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    _decimal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestToken> {
    return super.deploy(
      name_,
      symbol_,
      _decimal,
      overrides || {}
    ) as Promise<TestToken>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    _decimal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      _decimal,
      overrides || {}
    );
  }
  override attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  override connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
