/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SettingsInterface extends utils.Interface {
  functions: {
    "ValidationPercentage()": FunctionFragment;
    "approvedToAdd(address,address)": FunctionFragment;
    "baseFeeEnable()": FunctionFragment;
    "baseFeePercentage()": FunctionFragment;
    "brgToken()": FunctionFragment;
    "controller()": FunctionFragment;
    "enableBaseFee()": FunctionFragment;
    "feeRemitance()": FunctionFragment;
    "gasBank()": FunctionFragment;
    "getNetworkSupportedChains()": FunctionFragment;
    "isNetworkSupportedChain(uint256)": FunctionFragment;
    "maxFeeThreshold()": FunctionFragment;
    "minValidationPercentage()": FunctionFragment;
    "minValidations()": FunctionFragment;
    "minWithdrawableFee()": FunctionFragment;
    "networkGas(uint256)": FunctionFragment;
    "networkSupportedChains(uint256)": FunctionFragment;
    "onlyOwnableRail()": FunctionFragment;
    "railOwnerFeeShare()": FunctionFragment;
    "railRegistrationFee()": FunctionFragment;
    "setApprovedToAdd(address,address,bool)": FunctionFragment;
    "setFeeRemitanceAddress(address)": FunctionFragment;
    "setMinValidationPercentage(uint256)": FunctionFragment;
    "setNetworkSupportedChains(uint256[],uint256[],bool)": FunctionFragment;
    "setOnlyOwnableRailState(bool)": FunctionFragment;
    "setRailOwnerFeeShare(uint256)": FunctionFragment;
    "setUpdatableAssetState(bool)": FunctionFragment;
    "setbaseFeePercentage(uint256)": FunctionFragment;
    "setbrgToken(address)": FunctionFragment;
    "setminWithdrawableFee(uint256)": FunctionFragment;
    "setrailRegistrationFee(uint256)": FunctionFragment;
    "updatableAssetState()": FunctionFragment;
    "updateGasBank(address)": FunctionFragment;
    "updateNetworkGas(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ValidationPercentage"
      | "approvedToAdd"
      | "baseFeeEnable"
      | "baseFeePercentage"
      | "brgToken"
      | "controller"
      | "enableBaseFee"
      | "feeRemitance"
      | "gasBank"
      | "getNetworkSupportedChains"
      | "isNetworkSupportedChain"
      | "maxFeeThreshold"
      | "minValidationPercentage"
      | "minValidations"
      | "minWithdrawableFee"
      | "networkGas"
      | "networkSupportedChains"
      | "onlyOwnableRail"
      | "railOwnerFeeShare"
      | "railRegistrationFee"
      | "setApprovedToAdd"
      | "setFeeRemitanceAddress"
      | "setMinValidationPercentage"
      | "setNetworkSupportedChains"
      | "setOnlyOwnableRailState"
      | "setRailOwnerFeeShare"
      | "setUpdatableAssetState"
      | "setbaseFeePercentage"
      | "setbrgToken"
      | "setminWithdrawableFee"
      | "setrailRegistrationFee"
      | "updatableAssetState"
      | "updateGasBank"
      | "updateNetworkGas"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ValidationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvedToAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseFeeEnable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "brgToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableBaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRemitance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasBank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNetworkSupportedChains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNetworkSupportedChain",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFeeThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minValidationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minValidations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWithdrawableFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkGas",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "networkSupportedChains",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onlyOwnableRail",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "railOwnerFeeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "railRegistrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedToAdd",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRemitanceAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinValidationPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNetworkSupportedChains",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOnlyOwnableRailState",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRailOwnerFeeShare",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdatableAssetState",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setbaseFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setbrgToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setminWithdrawableFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setrailRegistrationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatableAssetState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateGasBank",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkGas",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ValidationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedToAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseFeeEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "brgToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enableBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRemitance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkSupportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNetworkSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFeeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minValidationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWithdrawableFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "networkGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "networkSupportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnableRail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "railOwnerFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "railRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedToAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRemitanceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinValidationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNetworkSupportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOnlyOwnableRailState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRailOwnerFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdatableAssetState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setbaseFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setbrgToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setminWithdrawableFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setrailRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatableAssetState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateGasBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkGas",
    data: BytesLike
  ): Result;

  events: {
    "ApprovedToAdd(address,address,bool)": EventFragment;
    "BaseFeePercentageUpdated(uint256,uint256)": EventFragment;
    "BaseFeeStatusChanged(bool)": EventFragment;
    "BrdgTokenUpdated(address,address)": EventFragment;
    "FeeRemitanceAddressUpdated(address,address)": EventFragment;
    "GasBankUpdated(address,address)": EventFragment;
    "MinValidationPercentageUpdated(uint256,uint256)": EventFragment;
    "NetworkGasUpdated(uint256,uint256,uint256)": EventFragment;
    "NetworkSupportedChainsUpdated(uint256[],bool)": EventFragment;
    "OnlyOwnableRailStateEnabled(bool)": EventFragment;
    "RailOwnerFeeShareUpdated(uint256,uint256)": EventFragment;
    "RailRegistrationFeeUpdated(uint256,uint256)": EventFragment;
    "UpdatableAssetStateChanged(bool)": EventFragment;
    "minWithdrawableFeeUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovedToAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseFeePercentageUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseFeeStatusChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrdgTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRemitanceAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GasBankUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinValidationPercentageUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NetworkGasUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NetworkSupportedChainsUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OnlyOwnableRailStateEnabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RailOwnerFeeShareUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RailRegistrationFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatableAssetStateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "minWithdrawableFeeUpdated"): EventFragment;
}

export interface ApprovedToAddEventObject {
  token: string;
  user: string;
  status: boolean;
}
export type ApprovedToAddEvent = TypedEvent<
  [string, string, boolean],
  ApprovedToAddEventObject
>;

export type ApprovedToAddEventFilter = TypedEventFilter<ApprovedToAddEvent>;

export interface BaseFeePercentageUpdatedEventObject {
  prevValue: BigNumber;
  newValue: BigNumber;
}
export type BaseFeePercentageUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BaseFeePercentageUpdatedEventObject
>;

export type BaseFeePercentageUpdatedEventFilter =
  TypedEventFilter<BaseFeePercentageUpdatedEvent>;

export interface BaseFeeStatusChangedEventObject {
  baseFeeEnable: boolean;
}
export type BaseFeeStatusChangedEvent = TypedEvent<
  [boolean],
  BaseFeeStatusChangedEventObject
>;

export type BaseFeeStatusChangedEventFilter =
  TypedEventFilter<BaseFeeStatusChangedEvent>;

export interface BrdgTokenUpdatedEventObject {
  prevValue: string;
  newValue: string;
}
export type BrdgTokenUpdatedEvent = TypedEvent<
  [string, string],
  BrdgTokenUpdatedEventObject
>;

export type BrdgTokenUpdatedEventFilter =
  TypedEventFilter<BrdgTokenUpdatedEvent>;

export interface FeeRemitanceAddressUpdatedEventObject {
  prevValue: string;
  newValue: string;
}
export type FeeRemitanceAddressUpdatedEvent = TypedEvent<
  [string, string],
  FeeRemitanceAddressUpdatedEventObject
>;

export type FeeRemitanceAddressUpdatedEventFilter =
  TypedEventFilter<FeeRemitanceAddressUpdatedEvent>;

export interface GasBankUpdatedEventObject {
  prevValue: string;
  newValue: string;
}
export type GasBankUpdatedEvent = TypedEvent<
  [string, string],
  GasBankUpdatedEventObject
>;

export type GasBankUpdatedEventFilter = TypedEventFilter<GasBankUpdatedEvent>;

export interface MinValidationPercentageUpdatedEventObject {
  prevMinValidationPercentage: BigNumber;
  newMinValidationPercentage: BigNumber;
}
export type MinValidationPercentageUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinValidationPercentageUpdatedEventObject
>;

export type MinValidationPercentageUpdatedEventFilter =
  TypedEventFilter<MinValidationPercentageUpdatedEvent>;

export interface NetworkGasUpdatedEventObject {
  chainId: BigNumber;
  prevValue: BigNumber;
  newValue: BigNumber;
}
export type NetworkGasUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  NetworkGasUpdatedEventObject
>;

export type NetworkGasUpdatedEventFilter =
  TypedEventFilter<NetworkGasUpdatedEvent>;

export interface NetworkSupportedChainsUpdatedEventObject {
  chains: BigNumber[];
  isadded: boolean;
}
export type NetworkSupportedChainsUpdatedEvent = TypedEvent<
  [BigNumber[], boolean],
  NetworkSupportedChainsUpdatedEventObject
>;

export type NetworkSupportedChainsUpdatedEventFilter =
  TypedEventFilter<NetworkSupportedChainsUpdatedEvent>;

export interface OnlyOwnableRailStateEnabledEventObject {
  status: boolean;
}
export type OnlyOwnableRailStateEnabledEvent = TypedEvent<
  [boolean],
  OnlyOwnableRailStateEnabledEventObject
>;

export type OnlyOwnableRailStateEnabledEventFilter =
  TypedEventFilter<OnlyOwnableRailStateEnabledEvent>;

export interface RailOwnerFeeShareUpdatedEventObject {
  prevValue: BigNumber;
  newValue: BigNumber;
}
export type RailOwnerFeeShareUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RailOwnerFeeShareUpdatedEventObject
>;

export type RailOwnerFeeShareUpdatedEventFilter =
  TypedEventFilter<RailOwnerFeeShareUpdatedEvent>;

export interface RailRegistrationFeeUpdatedEventObject {
  prevValue: BigNumber;
  newValue: BigNumber;
}
export type RailRegistrationFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RailRegistrationFeeUpdatedEventObject
>;

export type RailRegistrationFeeUpdatedEventFilter =
  TypedEventFilter<RailRegistrationFeeUpdatedEvent>;

export interface UpdatableAssetStateChangedEventObject {
  status: boolean;
}
export type UpdatableAssetStateChangedEvent = TypedEvent<
  [boolean],
  UpdatableAssetStateChangedEventObject
>;

export type UpdatableAssetStateChangedEventFilter =
  TypedEventFilter<UpdatableAssetStateChangedEvent>;

export interface minWithdrawableFeeUpdatedEventObject {
  prevValue: BigNumber;
  newValue: BigNumber;
}
export type minWithdrawableFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  minWithdrawableFeeUpdatedEventObject
>;

export type minWithdrawableFeeUpdatedEventFilter =
  TypedEventFilter<minWithdrawableFeeUpdatedEvent>;

export interface Settings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SettingsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ValidationPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvedToAdd(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    baseFeeEnable(overrides?: CallOverrides): Promise<[boolean]>;

    baseFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    brgToken(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    enableBaseFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeRemitance(overrides?: CallOverrides): Promise<[string]>;

    gasBank(overrides?: CallOverrides): Promise<[string]>;

    getNetworkSupportedChains(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isNetworkSupportedChain(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxFeeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    minValidationPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    minValidations(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minvalidation: BigNumber }>;

    minWithdrawableFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    networkGas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    networkSupportedChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onlyOwnableRail(overrides?: CallOverrides): Promise<[boolean]>;

    railOwnerFeeShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    railRegistrationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setApprovedToAdd(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeRemitanceAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinValidationPercentage(
      _ValidationPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNetworkSupportedChains(
      chains: PromiseOrValue<BigNumberish>[],
      fees: PromiseOrValue<BigNumberish>[],
      addchain: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOnlyOwnableRailState(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRailOwnerFeeShare(
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpdatableAssetState(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setbaseFeePercentage(
      _base: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setbrgToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setminWithdrawableFee(
      _minWithdrawableFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setrailRegistrationFee(
      registrationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatableAssetState(overrides?: CallOverrides): Promise<[boolean]>;

    updateGasBank(
      _gasbank: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNetworkGas(
      chainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ValidationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  approvedToAdd(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  baseFeeEnable(overrides?: CallOverrides): Promise<boolean>;

  baseFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  brgToken(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  enableBaseFee(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeRemitance(overrides?: CallOverrides): Promise<string>;

  gasBank(overrides?: CallOverrides): Promise<string>;

  getNetworkSupportedChains(overrides?: CallOverrides): Promise<BigNumber[]>;

  isNetworkSupportedChain(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxFeeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  minValidationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  minValidations(overrides?: CallOverrides): Promise<BigNumber>;

  minWithdrawableFee(overrides?: CallOverrides): Promise<BigNumber>;

  networkGas(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  networkSupportedChains(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onlyOwnableRail(overrides?: CallOverrides): Promise<boolean>;

  railOwnerFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

  railRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

  setApprovedToAdd(
    user: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeRemitanceAddress(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinValidationPercentage(
    _ValidationPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNetworkSupportedChains(
    chains: PromiseOrValue<BigNumberish>[],
    fees: PromiseOrValue<BigNumberish>[],
    addchain: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOnlyOwnableRailState(
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRailOwnerFeeShare(
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpdatableAssetState(
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setbaseFeePercentage(
    _base: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setbrgToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setminWithdrawableFee(
    _minWithdrawableFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setrailRegistrationFee(
    registrationFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatableAssetState(overrides?: CallOverrides): Promise<boolean>;

  updateGasBank(
    _gasbank: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNetworkGas(
    chainId: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ValidationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    approvedToAdd(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    baseFeeEnable(overrides?: CallOverrides): Promise<boolean>;

    baseFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    brgToken(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    enableBaseFee(overrides?: CallOverrides): Promise<void>;

    feeRemitance(overrides?: CallOverrides): Promise<string>;

    gasBank(overrides?: CallOverrides): Promise<string>;

    getNetworkSupportedChains(overrides?: CallOverrides): Promise<BigNumber[]>;

    isNetworkSupportedChain(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxFeeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    minValidationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minValidations(overrides?: CallOverrides): Promise<BigNumber>;

    minWithdrawableFee(overrides?: CallOverrides): Promise<BigNumber>;

    networkGas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkSupportedChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onlyOwnableRail(overrides?: CallOverrides): Promise<boolean>;

    railOwnerFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

    railRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovedToAdd(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRemitanceAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinValidationPercentage(
      _ValidationPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNetworkSupportedChains(
      chains: PromiseOrValue<BigNumberish>[],
      fees: PromiseOrValue<BigNumberish>[],
      addchain: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOnlyOwnableRailState(
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRailOwnerFeeShare(
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdatableAssetState(
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setbaseFeePercentage(
      _base: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setbrgToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setminWithdrawableFee(
      _minWithdrawableFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setrailRegistrationFee(
      registrationFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatableAssetState(overrides?: CallOverrides): Promise<boolean>;

    updateGasBank(
      _gasbank: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNetworkGas(
      chainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApprovedToAdd(address,address,bool)"(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      status?: null
    ): ApprovedToAddEventFilter;
    ApprovedToAdd(
      token?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      status?: null
    ): ApprovedToAddEventFilter;

    "BaseFeePercentageUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): BaseFeePercentageUpdatedEventFilter;
    BaseFeePercentageUpdated(
      prevValue?: null,
      newValue?: null
    ): BaseFeePercentageUpdatedEventFilter;

    "BaseFeeStatusChanged(bool)"(
      baseFeeEnable?: null
    ): BaseFeeStatusChangedEventFilter;
    BaseFeeStatusChanged(baseFeeEnable?: null): BaseFeeStatusChangedEventFilter;

    "BrdgTokenUpdated(address,address)"(
      prevValue?: PromiseOrValue<string> | null,
      newValue?: PromiseOrValue<string> | null
    ): BrdgTokenUpdatedEventFilter;
    BrdgTokenUpdated(
      prevValue?: PromiseOrValue<string> | null,
      newValue?: PromiseOrValue<string> | null
    ): BrdgTokenUpdatedEventFilter;

    "FeeRemitanceAddressUpdated(address,address)"(
      prevValue?: PromiseOrValue<string> | null,
      newValue?: PromiseOrValue<string> | null
    ): FeeRemitanceAddressUpdatedEventFilter;
    FeeRemitanceAddressUpdated(
      prevValue?: PromiseOrValue<string> | null,
      newValue?: PromiseOrValue<string> | null
    ): FeeRemitanceAddressUpdatedEventFilter;

    "GasBankUpdated(address,address)"(
      prevValue?: PromiseOrValue<string> | null,
      newValue?: PromiseOrValue<string> | null
    ): GasBankUpdatedEventFilter;
    GasBankUpdated(
      prevValue?: PromiseOrValue<string> | null,
      newValue?: PromiseOrValue<string> | null
    ): GasBankUpdatedEventFilter;

    "MinValidationPercentageUpdated(uint256,uint256)"(
      prevMinValidationPercentage?: null,
      newMinValidationPercentage?: null
    ): MinValidationPercentageUpdatedEventFilter;
    MinValidationPercentageUpdated(
      prevMinValidationPercentage?: null,
      newMinValidationPercentage?: null
    ): MinValidationPercentageUpdatedEventFilter;

    "NetworkGasUpdated(uint256,uint256,uint256)"(
      chainId?: null,
      prevValue?: null,
      newValue?: null
    ): NetworkGasUpdatedEventFilter;
    NetworkGasUpdated(
      chainId?: null,
      prevValue?: null,
      newValue?: null
    ): NetworkGasUpdatedEventFilter;

    "NetworkSupportedChainsUpdated(uint256[],bool)"(
      chains?: null,
      isadded?: null
    ): NetworkSupportedChainsUpdatedEventFilter;
    NetworkSupportedChainsUpdated(
      chains?: null,
      isadded?: null
    ): NetworkSupportedChainsUpdatedEventFilter;

    "OnlyOwnableRailStateEnabled(bool)"(
      status?: null
    ): OnlyOwnableRailStateEnabledEventFilter;
    OnlyOwnableRailStateEnabled(
      status?: null
    ): OnlyOwnableRailStateEnabledEventFilter;

    "RailOwnerFeeShareUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): RailOwnerFeeShareUpdatedEventFilter;
    RailOwnerFeeShareUpdated(
      prevValue?: null,
      newValue?: null
    ): RailOwnerFeeShareUpdatedEventFilter;

    "RailRegistrationFeeUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): RailRegistrationFeeUpdatedEventFilter;
    RailRegistrationFeeUpdated(
      prevValue?: null,
      newValue?: null
    ): RailRegistrationFeeUpdatedEventFilter;

    "UpdatableAssetStateChanged(bool)"(
      status?: null
    ): UpdatableAssetStateChangedEventFilter;
    UpdatableAssetStateChanged(
      status?: null
    ): UpdatableAssetStateChangedEventFilter;

    "minWithdrawableFeeUpdated(uint256,uint256)"(
      prevValue?: null,
      newValue?: null
    ): minWithdrawableFeeUpdatedEventFilter;
    minWithdrawableFeeUpdated(
      prevValue?: null,
      newValue?: null
    ): minWithdrawableFeeUpdatedEventFilter;
  };

  estimateGas: {
    ValidationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    approvedToAdd(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseFeeEnable(overrides?: CallOverrides): Promise<BigNumber>;

    baseFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    brgToken(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    enableBaseFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeRemitance(overrides?: CallOverrides): Promise<BigNumber>;

    gasBank(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkSupportedChains(overrides?: CallOverrides): Promise<BigNumber>;

    isNetworkSupportedChain(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxFeeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    minValidationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minValidations(overrides?: CallOverrides): Promise<BigNumber>;

    minWithdrawableFee(overrides?: CallOverrides): Promise<BigNumber>;

    networkGas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkSupportedChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onlyOwnableRail(overrides?: CallOverrides): Promise<BigNumber>;

    railOwnerFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

    railRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    setApprovedToAdd(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeRemitanceAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinValidationPercentage(
      _ValidationPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNetworkSupportedChains(
      chains: PromiseOrValue<BigNumberish>[],
      fees: PromiseOrValue<BigNumberish>[],
      addchain: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOnlyOwnableRailState(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRailOwnerFeeShare(
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpdatableAssetState(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setbaseFeePercentage(
      _base: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setbrgToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setminWithdrawableFee(
      _minWithdrawableFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setrailRegistrationFee(
      registrationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatableAssetState(overrides?: CallOverrides): Promise<BigNumber>;

    updateGasBank(
      _gasbank: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNetworkGas(
      chainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ValidationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approvedToAdd(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseFeeEnable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseFeePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    brgToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableBaseFee(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeRemitance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasBank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetworkSupportedChains(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNetworkSupportedChain(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFeeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minValidationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minValidations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minWithdrawableFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkGas(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkSupportedChains(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onlyOwnableRail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    railOwnerFeeShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    railRegistrationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovedToAdd(
      user: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRemitanceAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinValidationPercentage(
      _ValidationPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNetworkSupportedChains(
      chains: PromiseOrValue<BigNumberish>[],
      fees: PromiseOrValue<BigNumberish>[],
      addchain: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOnlyOwnableRailState(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRailOwnerFeeShare(
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpdatableAssetState(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setbaseFeePercentage(
      _base: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setbrgToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setminWithdrawableFee(
      _minWithdrawableFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setrailRegistrationFee(
      registrationFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatableAssetState(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateGasBank(
      _gasbank: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNetworkGas(
      chainId: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
