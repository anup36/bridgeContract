/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Ibridge {
  export type AssetStruct = {
    tokenAddress: PromiseOrValue<string>;
    minAmount: PromiseOrValue<BigNumberish>;
    maxAmount: PromiseOrValue<BigNumberish>;
    feeBalance: PromiseOrValue<BigNumberish>;
    collectedFees: PromiseOrValue<BigNumberish>;
    ownedRail: PromiseOrValue<boolean>;
    manager: PromiseOrValue<string>;
    feeRemitance: PromiseOrValue<string>;
    balance: PromiseOrValue<BigNumberish>;
    isSet: PromiseOrValue<boolean>;
  };

  export type AssetStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    tokenAddress: string;
    minAmount: BigNumber;
    maxAmount: BigNumber;
    feeBalance: BigNumber;
    collectedFees: BigNumber;
    ownedRail: boolean;
    manager: string;
    feeRemitance: string;
    balance: BigNumber;
    isSet: boolean;
  };
}

export interface BridgeSocketInterface extends utils.Interface {
  functions: {
    "bridge()": FunctionFragment;
    "bridgeAsset(address,uint256,uint256,address)": FunctionFragment;
    "feeController()": FunctionFragment;
    "feeRemitance()": FunctionFragment;
    "getAsset(address)": FunctionFragment;
    "getAssetLimits(address)": FunctionFragment;
    "getDirectswapAssetCount()": FunctionFragment;
    "getForiegnAssetCount()": FunctionFragment;
    "getNativeAssetCount()": FunctionFragment;
    "getSupportedChainIDs()": FunctionFragment;
    "getTransactionFee(uint256)": FunctionFragment;
    "getTransactionGas(address,address,uint256)": FunctionFragment;
    "isForiegnAsset(address)": FunctionFragment;
    "isNativeAsset(address)": FunctionFragment;
    "isSupportedChain(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseSocket()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "settings()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "updateFeeRemitance(address)": FunctionFragment;
    "updateSocket(address,address,address)": FunctionFragment;
    "validAsset(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridge"
      | "bridgeAsset"
      | "feeController"
      | "feeRemitance"
      | "getAsset"
      | "getAssetLimits"
      | "getDirectswapAssetCount"
      | "getForiegnAssetCount"
      | "getNativeAssetCount"
      | "getSupportedChainIDs"
      | "getTransactionFee"
      | "getTransactionGas"
      | "isForiegnAsset"
      | "isNativeAsset"
      | "isSupportedChain"
      | "owner"
      | "pauseSocket"
      | "paused"
      | "renounceOwnership"
      | "settings"
      | "transferOwnership"
      | "updateFee"
      | "updateFeeRemitance"
      | "updateSocket"
      | "validAsset"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "feeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRemitance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetLimits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDirectswapAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForiegnAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedChainIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionGas",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isForiegnAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNativeAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSupportedChain",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseSocket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRemitance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSocket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validAsset",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRemitance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDirectswapAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForiegnAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedChainIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isForiegnAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNativeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseSocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRemitance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validAsset", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SendTransaction(bytes32,uint256,address,uint256,address,address)": EventFragment;
    "feeRemitanceUpdated(address,address)": EventFragment;
    "feeUpdated(uint256,uint256)": EventFragment;
    "socketUpdated(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "feeRemitanceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "feeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "socketUpdated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SendTransactionEventObject {
  transactionID: string;
  chainID: BigNumber;
  assetAddress: string;
  sendAmount: BigNumber;
  receiver: string;
  sender: string;
}
export type SendTransactionEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string, string],
  SendTransactionEventObject
>;

export type SendTransactionEventFilter = TypedEventFilter<SendTransactionEvent>;

export interface feeRemitanceUpdatedEventObject {
  prevFeeRemitance: string;
  currentFeeRemitance: string;
}
export type feeRemitanceUpdatedEvent = TypedEvent<
  [string, string],
  feeRemitanceUpdatedEventObject
>;

export type feeRemitanceUpdatedEventFilter =
  TypedEventFilter<feeRemitanceUpdatedEvent>;

export interface feeUpdatedEventObject {
  prevFee: BigNumber;
  currentFee: BigNumber;
}
export type feeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  feeUpdatedEventObject
>;

export type feeUpdatedEventFilter = TypedEventFilter<feeUpdatedEvent>;

export interface socketUpdatedEventObject {
  currentFeeController: string;
  currentSettings: string;
  currentBridge: string;
}
export type socketUpdatedEvent = TypedEvent<
  [string, string, string],
  socketUpdatedEventObject
>;

export type socketUpdatedEventFilter = TypedEventFilter<socketUpdatedEvent>;

export interface BridgeSocket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeSocketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridge(overrides?: CallOverrides): Promise<[string]>;

    bridgeAsset(
      assetAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeController(overrides?: CallOverrides): Promise<[string]>;

    feeRemitance(overrides?: CallOverrides): Promise<[string]>;

    getAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Ibridge.AssetStructOutput]>;

    getAssetLimits(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDirectswapAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getForiegnAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNativeAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSupportedChainIDs(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getTransactionFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTransactionGas(
      sender: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      chainTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isForiegnAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNativeAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSupportedChain(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseSocket(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settings(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeeRemitance(
      _feeRemitance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSocket(
      _feecontroller: PromiseOrValue<string>,
      _settings: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  bridge(overrides?: CallOverrides): Promise<string>;

  bridgeAsset(
    assetAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    reciever: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeController(overrides?: CallOverrides): Promise<string>;

  feeRemitance(overrides?: CallOverrides): Promise<string>;

  getAsset(
    assetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Ibridge.AssetStructOutput>;

  getAssetLimits(
    assetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getDirectswapAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  getForiegnAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  getNativeAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  getSupportedChainIDs(overrides?: CallOverrides): Promise<BigNumber[]>;

  getTransactionFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTransactionGas(
    sender: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    chainTo: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isForiegnAsset(
    assetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNativeAsset(
    assetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSupportedChain(
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseSocket(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settings(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeeRemitance(
    _feeRemitance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSocket(
    _feecontroller: PromiseOrValue<string>,
    _settings: PromiseOrValue<string>,
    _bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validAsset(
    assetAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    bridge(overrides?: CallOverrides): Promise<string>;

    bridgeAsset(
      assetAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeController(overrides?: CallOverrides): Promise<string>;

    feeRemitance(overrides?: CallOverrides): Promise<string>;

    getAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Ibridge.AssetStructOutput>;

    getAssetLimits(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDirectswapAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getForiegnAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNativeAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedChainIDs(overrides?: CallOverrides): Promise<BigNumber[]>;

    getTransactionFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionGas(
      sender: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      chainTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForiegnAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNativeAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSupportedChain(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseSocket(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    settings(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeRemitance(
      _feeRemitance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSocket(
      _feecontroller: PromiseOrValue<string>,
      _settings: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SendTransaction(bytes32,uint256,address,uint256,address,address)"(
      transactionID?: null,
      chainID?: null,
      assetAddress?: PromiseOrValue<string> | null,
      sendAmount?: null,
      receiver?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): SendTransactionEventFilter;
    SendTransaction(
      transactionID?: null,
      chainID?: null,
      assetAddress?: PromiseOrValue<string> | null,
      sendAmount?: null,
      receiver?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): SendTransactionEventFilter;

    "feeRemitanceUpdated(address,address)"(
      prevFeeRemitance?: null,
      currentFeeRemitance?: null
    ): feeRemitanceUpdatedEventFilter;
    feeRemitanceUpdated(
      prevFeeRemitance?: null,
      currentFeeRemitance?: null
    ): feeRemitanceUpdatedEventFilter;

    "feeUpdated(uint256,uint256)"(
      prevFee?: null,
      currentFee?: null
    ): feeUpdatedEventFilter;
    feeUpdated(prevFee?: null, currentFee?: null): feeUpdatedEventFilter;

    "socketUpdated(address,address,address)"(
      currentFeeController?: null,
      currentSettings?: null,
      currentBridge?: null
    ): socketUpdatedEventFilter;
    socketUpdated(
      currentFeeController?: null,
      currentSettings?: null,
      currentBridge?: null
    ): socketUpdatedEventFilter;
  };

  estimateGas: {
    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeAsset(
      assetAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeController(overrides?: CallOverrides): Promise<BigNumber>;

    feeRemitance(overrides?: CallOverrides): Promise<BigNumber>;

    getAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetLimits(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDirectswapAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getForiegnAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getNativeAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedChainIDs(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionGas(
      sender: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      chainTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForiegnAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNativeAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSupportedChain(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseSocket(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeeRemitance(
      _feeRemitance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSocket(
      _feecontroller: PromiseOrValue<string>,
      _settings: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeAsset(
      assetAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRemitance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetLimits(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDirectswapAssetCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForiegnAssetCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeAssetCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedChainIDs(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionGas(
      sender: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      chainTo: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isForiegnAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNativeAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSupportedChain(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseSocket(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeRemitance(
      _feeRemitance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSocket(
      _feecontroller: PromiseOrValue<string>,
      _settings: PromiseOrValue<string>,
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validAsset(
      assetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
