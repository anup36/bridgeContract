/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface BridgePoolInterface extends utils.Interface {
  functions: {
    "activateNewBridge()": FunctionFragment;
    "bridge()": FunctionFragment;
    "bridgeUpdateDelay()": FunctionFragment;
    "bridgeUpdateInnitiatedAt()": FunctionFragment;
    "controller()": FunctionFragment;
    "createPool(address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "getWrappedAsset(address)": FunctionFragment;
    "initializePool(address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "innitiateBridgeUpdate(address)": FunctionFragment;
    "pendingBridge()": FunctionFragment;
    "poolAddresses(uint256)": FunctionFragment;
    "poolCount()": FunctionFragment;
    "pools(address)": FunctionFragment;
    "sendOut(address,address,uint256)": FunctionFragment;
    "suspendBridgeUpdate()": FunctionFragment;
    "topUp(address,uint256)": FunctionFragment;
    "updatePoolDebtThreshold(address,uint256)": FunctionFragment;
    "validPool(address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateNewBridge"
      | "bridge"
      | "bridgeUpdateDelay"
      | "bridgeUpdateInnitiatedAt"
      | "controller"
      | "createPool"
      | "deposit"
      | "getWrappedAsset"
      | "initializePool"
      | "initialized"
      | "innitiateBridgeUpdate"
      | "pendingBridge"
      | "poolAddresses"
      | "poolCount"
      | "pools"
      | "sendOut"
      | "suspendBridgeUpdate"
      | "topUp"
      | "updatePoolDebtThreshold"
      | "validPool"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateNewBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bridgeUpdateDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeUpdateInnitiatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "innitiateBridgeUpdate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "poolCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "suspendBridgeUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topUp",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolDebtThreshold",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateNewBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeUpdateDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeUpdateInnitiatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "innitiateBridgeUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "suspendBridgeUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "topUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolDebtThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AssetDeposited(address,uint256)": EventFragment;
    "AssetSentOut(address,address,uint256)": EventFragment;
    "AssetWithdrawn(address,address,uint256)": EventFragment;
    "NewBridgeActivated(address,address)": EventFragment;
    "NewBridgeInnitiated(address,address)": EventFragment;
    "PoolCreated(address,address)": EventFragment;
    "PoolDebtThresholdUpdated(address,uint256,uint256)": EventFragment;
    "PoolToppedUp(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetSentOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBridgeActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBridgeInnitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolDebtThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolToppedUp"): EventFragment;
}

export interface AssetDepositedEventObject {
  poolAddress: string;
  amount: BigNumber;
}
export type AssetDepositedEvent = TypedEvent<
  [string, BigNumber],
  AssetDepositedEventObject
>;

export type AssetDepositedEventFilter = TypedEventFilter<AssetDepositedEvent>;

export interface AssetSentOutEventObject {
  poolAddress: string;
  reciever: string;
  amount: BigNumber;
}
export type AssetSentOutEvent = TypedEvent<
  [string, string, BigNumber],
  AssetSentOutEventObject
>;

export type AssetSentOutEventFilter = TypedEventFilter<AssetSentOutEvent>;

export interface AssetWithdrawnEventObject {
  poolAddress: string;
  receiver: string;
  amount: BigNumber;
}
export type AssetWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  AssetWithdrawnEventObject
>;

export type AssetWithdrawnEventFilter = TypedEventFilter<AssetWithdrawnEvent>;

export interface NewBridgeActivatedEventObject {
  prevBridge: string;
  newBridge: string;
}
export type NewBridgeActivatedEvent = TypedEvent<
  [string, string],
  NewBridgeActivatedEventObject
>;

export type NewBridgeActivatedEventFilter =
  TypedEventFilter<NewBridgeActivatedEvent>;

export interface NewBridgeInnitiatedEventObject {
  curentBridge: string;
  pendingBridge: string;
}
export type NewBridgeInnitiatedEvent = TypedEvent<
  [string, string],
  NewBridgeInnitiatedEventObject
>;

export type NewBridgeInnitiatedEventFilter =
  TypedEventFilter<NewBridgeInnitiatedEvent>;

export interface PoolCreatedEventObject {
  poolAddress: string;
  wrappedAsset: string;
}
export type PoolCreatedEvent = TypedEvent<
  [string, string],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface PoolDebtThresholdUpdatedEventObject {
  poolAddress: string;
  oldDebtThreshold: BigNumber;
  newDebtThreshold: BigNumber;
}
export type PoolDebtThresholdUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PoolDebtThresholdUpdatedEventObject
>;

export type PoolDebtThresholdUpdatedEventFilter =
  TypedEventFilter<PoolDebtThresholdUpdatedEvent>;

export interface PoolToppedUpEventObject {
  poolAddress: string;
  amount: BigNumber;
}
export type PoolToppedUpEvent = TypedEvent<
  [string, BigNumber],
  PoolToppedUpEventObject
>;

export type PoolToppedUpEventFilter = TypedEventFilter<PoolToppedUpEvent>;

export interface BridgePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateNewBridge(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridge(overrides?: CallOverrides): Promise<[string]>;

    bridgeUpdateDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    bridgeUpdateInnitiatedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    createPool(
      poolAddress: PromiseOrValue<string>,
      debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getWrappedAsset(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initializePool(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    innitiateBridgeUpdate(
      newBridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pendingBridge(overrides?: CallOverrides): Promise<[string]>;

    poolAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        wrappedAsset: string;
        deposited: BigNumber;
        debt: BigNumber;
        overFlow: BigNumber;
        debtThreshold: BigNumber;
        isSet: boolean;
      }
    >;

    sendOut(
      poolAddress: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    suspendBridgeUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    topUp(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePoolDebtThreshold(
      poolAddress: PromiseOrValue<string>,
      debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activateNewBridge(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridge(overrides?: CallOverrides): Promise<string>;

  bridgeUpdateDelay(overrides?: CallOverrides): Promise<BigNumber>;

  bridgeUpdateInnitiatedAt(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  createPool(
    poolAddress: PromiseOrValue<string>,
    debtThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    poolAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getWrappedAsset(
    poolAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  initializePool(
    _bridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  innitiateBridgeUpdate(
    newBridge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pendingBridge(overrides?: CallOverrides): Promise<string>;

  poolAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  poolCount(overrides?: CallOverrides): Promise<BigNumber>;

  pools(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      wrappedAsset: string;
      deposited: BigNumber;
      debt: BigNumber;
      overFlow: BigNumber;
      debtThreshold: BigNumber;
      isSet: boolean;
    }
  >;

  sendOut(
    poolAddress: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  suspendBridgeUpdate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  topUp(
    poolAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePoolDebtThreshold(
    poolAddress: PromiseOrValue<string>,
    debtThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validPool(
    poolAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    poolAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activateNewBridge(overrides?: CallOverrides): Promise<void>;

    bridge(overrides?: CallOverrides): Promise<string>;

    bridgeUpdateDelay(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeUpdateInnitiatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    createPool(
      poolAddress: PromiseOrValue<string>,
      debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getWrappedAsset(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initializePool(
      _bridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    innitiateBridgeUpdate(
      newBridge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingBridge(overrides?: CallOverrides): Promise<string>;

    poolAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        wrappedAsset: string;
        deposited: BigNumber;
        debt: BigNumber;
        overFlow: BigNumber;
        debtThreshold: BigNumber;
        isSet: boolean;
      }
    >;

    sendOut(
      poolAddress: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    suspendBridgeUpdate(overrides?: CallOverrides): Promise<void>;

    topUp(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePoolDebtThreshold(
      poolAddress: PromiseOrValue<string>,
      debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetDeposited(address,uint256)"(
      poolAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): AssetDepositedEventFilter;
    AssetDeposited(
      poolAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): AssetDepositedEventFilter;

    "AssetSentOut(address,address,uint256)"(
      poolAddress?: PromiseOrValue<string> | null,
      reciever?: PromiseOrValue<string> | null,
      amount?: null
    ): AssetSentOutEventFilter;
    AssetSentOut(
      poolAddress?: PromiseOrValue<string> | null,
      reciever?: PromiseOrValue<string> | null,
      amount?: null
    ): AssetSentOutEventFilter;

    "AssetWithdrawn(address,address,uint256)"(
      poolAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): AssetWithdrawnEventFilter;
    AssetWithdrawn(
      poolAddress?: PromiseOrValue<string> | null,
      receiver?: PromiseOrValue<string> | null,
      amount?: null
    ): AssetWithdrawnEventFilter;

    "NewBridgeActivated(address,address)"(
      prevBridge?: PromiseOrValue<string> | null,
      newBridge?: PromiseOrValue<string> | null
    ): NewBridgeActivatedEventFilter;
    NewBridgeActivated(
      prevBridge?: PromiseOrValue<string> | null,
      newBridge?: PromiseOrValue<string> | null
    ): NewBridgeActivatedEventFilter;

    "NewBridgeInnitiated(address,address)"(
      curentBridge?: PromiseOrValue<string> | null,
      pendingBridge?: PromiseOrValue<string> | null
    ): NewBridgeInnitiatedEventFilter;
    NewBridgeInnitiated(
      curentBridge?: PromiseOrValue<string> | null,
      pendingBridge?: PromiseOrValue<string> | null
    ): NewBridgeInnitiatedEventFilter;

    "PoolCreated(address,address)"(
      poolAddress?: PromiseOrValue<string> | null,
      wrappedAsset?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;
    PoolCreated(
      poolAddress?: PromiseOrValue<string> | null,
      wrappedAsset?: PromiseOrValue<string> | null
    ): PoolCreatedEventFilter;

    "PoolDebtThresholdUpdated(address,uint256,uint256)"(
      poolAddress?: PromiseOrValue<string> | null,
      oldDebtThreshold?: null,
      newDebtThreshold?: null
    ): PoolDebtThresholdUpdatedEventFilter;
    PoolDebtThresholdUpdated(
      poolAddress?: PromiseOrValue<string> | null,
      oldDebtThreshold?: null,
      newDebtThreshold?: null
    ): PoolDebtThresholdUpdatedEventFilter;

    "PoolToppedUp(address,uint256)"(
      poolAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): PoolToppedUpEventFilter;
    PoolToppedUp(
      poolAddress?: PromiseOrValue<string> | null,
      amount?: null
    ): PoolToppedUpEventFilter;
  };

  estimateGas: {
    activateNewBridge(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridge(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeUpdateDelay(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeUpdateInnitiatedAt(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      poolAddress: PromiseOrValue<string>,
      debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getWrappedAsset(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializePool(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    innitiateBridgeUpdate(
      newBridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pendingBridge(overrides?: CallOverrides): Promise<BigNumber>;

    poolAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendOut(
      poolAddress: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    suspendBridgeUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    topUp(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePoolDebtThreshold(
      poolAddress: PromiseOrValue<string>,
      debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateNewBridge(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeUpdateDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeUpdateInnitiatedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      poolAddress: PromiseOrValue<string>,
      debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getWrappedAsset(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializePool(
      _bridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    innitiateBridgeUpdate(
      newBridge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pendingBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendOut(
      poolAddress: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    suspendBridgeUpdate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    topUp(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePoolDebtThreshold(
      poolAddress: PromiseOrValue<string>,
      debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validPool(
      poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      poolAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
