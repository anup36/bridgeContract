/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ILssGovernanceInterface extends utils.Interface {
  functions: {
    "COMMITEE_INDEX()": FunctionFragment;
    "LSS_TEAM_INDEX()": FunctionFragment;
    "TOKEN_OWNER_INDEX()": FunctionFragment;
    "addCommitteeMembers(address[])": FunctionFragment;
    "claimCommitteeReward(uint256)": FunctionFragment;
    "committeeMemberVote(uint256,bool)": FunctionFragment;
    "committeeMembersCount()": FunctionFragment;
    "getAmountReported(uint256)": FunctionFragment;
    "getIsVoted(uint256,uint256)": FunctionFragment;
    "getVote(uint256,uint256)": FunctionFragment;
    "isCommitteeMember(address)": FunctionFragment;
    "isReportSolved(uint256)": FunctionFragment;
    "losslessClaim(uint256)": FunctionFragment;
    "losslessController()": FunctionFragment;
    "losslessReporting()": FunctionFragment;
    "losslessStaking()": FunctionFragment;
    "losslessVote(uint256,bool)": FunctionFragment;
    "proposeWallet(uint256,address)": FunctionFragment;
    "rejectWallet(uint256)": FunctionFragment;
    "removeCommitteeMembers(address[])": FunctionFragment;
    "reportResolution(uint256)": FunctionFragment;
    "resolveReport(uint256)": FunctionFragment;
    "retrieveCompensation()": FunctionFragment;
    "retrieveFunds(uint256)": FunctionFragment;
    "setCompensationAmount(uint256)": FunctionFragment;
    "setDisputePeriod(uint256)": FunctionFragment;
    "tokenOwnersVote(uint256,bool)": FunctionFragment;
    "walletDisputePeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COMMITEE_INDEX"
      | "LSS_TEAM_INDEX"
      | "TOKEN_OWNER_INDEX"
      | "addCommitteeMembers"
      | "claimCommitteeReward"
      | "committeeMemberVote"
      | "committeeMembersCount"
      | "getAmountReported"
      | "getIsVoted"
      | "getVote"
      | "isCommitteeMember"
      | "isReportSolved"
      | "losslessClaim"
      | "losslessController"
      | "losslessReporting"
      | "losslessStaking"
      | "losslessVote"
      | "proposeWallet"
      | "rejectWallet"
      | "removeCommitteeMembers"
      | "reportResolution"
      | "resolveReport"
      | "retrieveCompensation"
      | "retrieveFunds"
      | "setCompensationAmount"
      | "setDisputePeriod"
      | "tokenOwnersVote"
      | "walletDisputePeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COMMITEE_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LSS_TEAM_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_OWNER_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCommitteeMembers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCommitteeReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "committeeMemberVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "committeeMembersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountReported",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCommitteeMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isReportSolved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "losslessClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "losslessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessReporting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeWallet",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectWallet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCommitteeMembers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reportResolution",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveReport",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveCompensation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveFunds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompensationAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisputePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnersVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "walletDisputePeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMITEE_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LSS_TEAM_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_OWNER_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCommitteeMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCommitteeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "committeeMemberVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "committeeMembersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountReported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIsVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCommitteeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReportSolved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessReporting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCommitteeMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompensationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisputePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnersVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletDisputePeriod",
    data: BytesLike
  ): Result;

  events: {
    "CommitteeMajorityReach(uint256,bool)": EventFragment;
    "CommitteeMemberClaim(uint256,address,uint256)": EventFragment;
    "CommitteeMemberNegativeVote(uint256,address)": EventFragment;
    "CommitteeMemberPositiveVote(uint256,address)": EventFragment;
    "CommitteeMembersRemoval(address[])": EventFragment;
    "CompensationRetrieval(address,uint256)": EventFragment;
    "FundsRetrieval(uint256,uint256)": EventFragment;
    "LosslessClaim(address,uint256,uint256)": EventFragment;
    "LosslessTeamNegativeVote(uint256)": EventFragment;
    "LosslessTeamPositiveVote(uint256)": EventFragment;
    "NewCommitteeMembers(address[])": EventFragment;
    "NewDisputePeriod(uint256)": EventFragment;
    "ReportResolve(uint256,bool)": EventFragment;
    "TokenOwnersNegativeVote(uint256)": EventFragment;
    "TokenOwnersPositiveVote(uint256)": EventFragment;
    "WalletProposal(uint256,address)": EventFragment;
    "WalletRejection(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommitteeMajorityReach"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitteeMemberClaim"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommitteeMemberNegativeVote"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CommitteeMemberPositiveVote"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommitteeMembersRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompensationRetrieval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsRetrieval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTeamNegativeVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTeamPositiveVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCommitteeMembers"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDisputePeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportResolve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenOwnersNegativeVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenOwnersPositiveVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletRejection"): EventFragment;
}

export interface CommitteeMajorityReachEventObject {
  _reportId: BigNumber;
  _result: boolean;
}
export type CommitteeMajorityReachEvent = TypedEvent<
  [BigNumber, boolean],
  CommitteeMajorityReachEventObject
>;

export type CommitteeMajorityReachEventFilter =
  TypedEventFilter<CommitteeMajorityReachEvent>;

export interface CommitteeMemberClaimEventObject {
  _reportId: BigNumber;
  _member: string;
  _amount: BigNumber;
}
export type CommitteeMemberClaimEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  CommitteeMemberClaimEventObject
>;

export type CommitteeMemberClaimEventFilter =
  TypedEventFilter<CommitteeMemberClaimEvent>;

export interface CommitteeMemberNegativeVoteEventObject {
  _reportId: BigNumber;
  _member: string;
}
export type CommitteeMemberNegativeVoteEvent = TypedEvent<
  [BigNumber, string],
  CommitteeMemberNegativeVoteEventObject
>;

export type CommitteeMemberNegativeVoteEventFilter =
  TypedEventFilter<CommitteeMemberNegativeVoteEvent>;

export interface CommitteeMemberPositiveVoteEventObject {
  _reportId: BigNumber;
  _member: string;
}
export type CommitteeMemberPositiveVoteEvent = TypedEvent<
  [BigNumber, string],
  CommitteeMemberPositiveVoteEventObject
>;

export type CommitteeMemberPositiveVoteEventFilter =
  TypedEventFilter<CommitteeMemberPositiveVoteEvent>;

export interface CommitteeMembersRemovalEventObject {
  _members: string[];
}
export type CommitteeMembersRemovalEvent = TypedEvent<
  [string[]],
  CommitteeMembersRemovalEventObject
>;

export type CommitteeMembersRemovalEventFilter =
  TypedEventFilter<CommitteeMembersRemovalEvent>;

export interface CompensationRetrievalEventObject {
  _wallet: string;
  _amount: BigNumber;
}
export type CompensationRetrievalEvent = TypedEvent<
  [string, BigNumber],
  CompensationRetrievalEventObject
>;

export type CompensationRetrievalEventFilter =
  TypedEventFilter<CompensationRetrievalEvent>;

export interface FundsRetrievalEventObject {
  _reportId: BigNumber;
  _amount: BigNumber;
}
export type FundsRetrievalEvent = TypedEvent<
  [BigNumber, BigNumber],
  FundsRetrievalEventObject
>;

export type FundsRetrievalEventFilter = TypedEventFilter<FundsRetrievalEvent>;

export interface LosslessClaimEventObject {
  _token: string;
  _reportID: BigNumber;
  _amount: BigNumber;
}
export type LosslessClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LosslessClaimEventObject
>;

export type LosslessClaimEventFilter = TypedEventFilter<LosslessClaimEvent>;

export interface LosslessTeamNegativeVoteEventObject {
  _reportId: BigNumber;
}
export type LosslessTeamNegativeVoteEvent = TypedEvent<
  [BigNumber],
  LosslessTeamNegativeVoteEventObject
>;

export type LosslessTeamNegativeVoteEventFilter =
  TypedEventFilter<LosslessTeamNegativeVoteEvent>;

export interface LosslessTeamPositiveVoteEventObject {
  _reportId: BigNumber;
}
export type LosslessTeamPositiveVoteEvent = TypedEvent<
  [BigNumber],
  LosslessTeamPositiveVoteEventObject
>;

export type LosslessTeamPositiveVoteEventFilter =
  TypedEventFilter<LosslessTeamPositiveVoteEvent>;

export interface NewCommitteeMembersEventObject {
  _members: string[];
}
export type NewCommitteeMembersEvent = TypedEvent<
  [string[]],
  NewCommitteeMembersEventObject
>;

export type NewCommitteeMembersEventFilter =
  TypedEventFilter<NewCommitteeMembersEvent>;

export interface NewDisputePeriodEventObject {
  _newPeriod: BigNumber;
}
export type NewDisputePeriodEvent = TypedEvent<
  [BigNumber],
  NewDisputePeriodEventObject
>;

export type NewDisputePeriodEventFilter =
  TypedEventFilter<NewDisputePeriodEvent>;

export interface ReportResolveEventObject {
  _reportId: BigNumber;
  _resolution: boolean;
}
export type ReportResolveEvent = TypedEvent<
  [BigNumber, boolean],
  ReportResolveEventObject
>;

export type ReportResolveEventFilter = TypedEventFilter<ReportResolveEvent>;

export interface TokenOwnersNegativeVoteEventObject {
  _reportId: BigNumber;
}
export type TokenOwnersNegativeVoteEvent = TypedEvent<
  [BigNumber],
  TokenOwnersNegativeVoteEventObject
>;

export type TokenOwnersNegativeVoteEventFilter =
  TypedEventFilter<TokenOwnersNegativeVoteEvent>;

export interface TokenOwnersPositiveVoteEventObject {
  _reportId: BigNumber;
}
export type TokenOwnersPositiveVoteEvent = TypedEvent<
  [BigNumber],
  TokenOwnersPositiveVoteEventObject
>;

export type TokenOwnersPositiveVoteEventFilter =
  TypedEventFilter<TokenOwnersPositiveVoteEvent>;

export interface WalletProposalEventObject {
  _reportId: BigNumber;
  _wallet: string;
}
export type WalletProposalEvent = TypedEvent<
  [BigNumber, string],
  WalletProposalEventObject
>;

export type WalletProposalEventFilter = TypedEventFilter<WalletProposalEvent>;

export interface WalletRejectionEventObject {
  _reportId: BigNumber;
}
export type WalletRejectionEvent = TypedEvent<
  [BigNumber],
  WalletRejectionEventObject
>;

export type WalletRejectionEventFilter = TypedEventFilter<WalletRejectionEvent>;

export interface ILssGovernance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILssGovernanceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COMMITEE_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    addCommitteeMembers(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimCommitteeReward(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    committeeMemberVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    committeeMembersCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAmountReported(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIsVoted(
      _reportId: PromiseOrValue<BigNumberish>,
      _voterIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _voterIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isCommitteeMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReportSolved(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    losslessClaim(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    losslessController(overrides?: CallOverrides): Promise<[string]>;

    losslessReporting(overrides?: CallOverrides): Promise<[string]>;

    losslessStaking(overrides?: CallOverrides): Promise<[string]>;

    losslessVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposeWallet(
      _reportId: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rejectWallet(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCommitteeMembers(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportResolution(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    resolveReport(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrieveCompensation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrieveFunds(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCompensationAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDisputePeriod(
      _timeFrame: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenOwnersVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    walletDisputePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  COMMITEE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  addCommitteeMembers(
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimCommitteeReward(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  committeeMemberVote(
    _reportId: PromiseOrValue<BigNumberish>,
    _vote: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  committeeMembersCount(overrides?: CallOverrides): Promise<BigNumber>;

  getAmountReported(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIsVoted(
    _reportId: PromiseOrValue<BigNumberish>,
    _voterIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getVote(
    _reportId: PromiseOrValue<BigNumberish>,
    _voterIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isCommitteeMember(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReportSolved(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  losslessClaim(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  losslessController(overrides?: CallOverrides): Promise<string>;

  losslessReporting(overrides?: CallOverrides): Promise<string>;

  losslessStaking(overrides?: CallOverrides): Promise<string>;

  losslessVote(
    _reportId: PromiseOrValue<BigNumberish>,
    _vote: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposeWallet(
    _reportId: PromiseOrValue<BigNumberish>,
    wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rejectWallet(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCommitteeMembers(
    _members: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportResolution(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  resolveReport(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrieveCompensation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrieveFunds(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCompensationAmount(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDisputePeriod(
    _timeFrame: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenOwnersVote(
    _reportId: PromiseOrValue<BigNumberish>,
    _vote: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  walletDisputePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    COMMITEE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    addCommitteeMembers(
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimCommitteeReward(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    committeeMemberVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    committeeMembersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountReported(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsVoted(
      _reportId: PromiseOrValue<BigNumberish>,
      _voterIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _voterIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isCommitteeMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReportSolved(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    losslessClaim(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    losslessController(overrides?: CallOverrides): Promise<string>;

    losslessReporting(overrides?: CallOverrides): Promise<string>;

    losslessStaking(overrides?: CallOverrides): Promise<string>;

    losslessVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeWallet(
      _reportId: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rejectWallet(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCommitteeMembers(
      _members: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    reportResolution(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    resolveReport(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveCompensation(overrides?: CallOverrides): Promise<void>;

    retrieveFunds(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompensationAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisputePeriod(
      _timeFrame: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenOwnersVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    walletDisputePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CommitteeMajorityReach(uint256,bool)"(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _result?: PromiseOrValue<boolean> | null
    ): CommitteeMajorityReachEventFilter;
    CommitteeMajorityReach(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _result?: PromiseOrValue<boolean> | null
    ): CommitteeMajorityReachEventFilter;

    "CommitteeMemberClaim(uint256,address,uint256)"(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _member?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): CommitteeMemberClaimEventFilter;
    CommitteeMemberClaim(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _member?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): CommitteeMemberClaimEventFilter;

    "CommitteeMemberNegativeVote(uint256,address)"(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _member?: PromiseOrValue<string> | null
    ): CommitteeMemberNegativeVoteEventFilter;
    CommitteeMemberNegativeVote(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _member?: PromiseOrValue<string> | null
    ): CommitteeMemberNegativeVoteEventFilter;

    "CommitteeMemberPositiveVote(uint256,address)"(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _member?: PromiseOrValue<string> | null
    ): CommitteeMemberPositiveVoteEventFilter;
    CommitteeMemberPositiveVote(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _member?: PromiseOrValue<string> | null
    ): CommitteeMemberPositiveVoteEventFilter;

    "CommitteeMembersRemoval(address[])"(
      _members?: null
    ): CommitteeMembersRemovalEventFilter;
    CommitteeMembersRemoval(
      _members?: null
    ): CommitteeMembersRemovalEventFilter;

    "CompensationRetrieval(address,uint256)"(
      _wallet?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): CompensationRetrievalEventFilter;
    CompensationRetrieval(
      _wallet?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): CompensationRetrievalEventFilter;

    "FundsRetrieval(uint256,uint256)"(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): FundsRetrievalEventFilter;
    FundsRetrieval(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): FundsRetrievalEventFilter;

    "LosslessClaim(address,uint256,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _reportID?: PromiseOrValue<BigNumberish> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): LosslessClaimEventFilter;
    LosslessClaim(
      _token?: PromiseOrValue<string> | null,
      _reportID?: PromiseOrValue<BigNumberish> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): LosslessClaimEventFilter;

    "LosslessTeamNegativeVote(uint256)"(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): LosslessTeamNegativeVoteEventFilter;
    LosslessTeamNegativeVote(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): LosslessTeamNegativeVoteEventFilter;

    "LosslessTeamPositiveVote(uint256)"(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): LosslessTeamPositiveVoteEventFilter;
    LosslessTeamPositiveVote(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): LosslessTeamPositiveVoteEventFilter;

    "NewCommitteeMembers(address[])"(
      _members?: null
    ): NewCommitteeMembersEventFilter;
    NewCommitteeMembers(_members?: null): NewCommitteeMembersEventFilter;

    "NewDisputePeriod(uint256)"(
      _newPeriod?: PromiseOrValue<BigNumberish> | null
    ): NewDisputePeriodEventFilter;
    NewDisputePeriod(
      _newPeriod?: PromiseOrValue<BigNumberish> | null
    ): NewDisputePeriodEventFilter;

    "ReportResolve(uint256,bool)"(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _resolution?: PromiseOrValue<boolean> | null
    ): ReportResolveEventFilter;
    ReportResolve(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _resolution?: PromiseOrValue<boolean> | null
    ): ReportResolveEventFilter;

    "TokenOwnersNegativeVote(uint256)"(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): TokenOwnersNegativeVoteEventFilter;
    TokenOwnersNegativeVote(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): TokenOwnersNegativeVoteEventFilter;

    "TokenOwnersPositiveVote(uint256)"(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): TokenOwnersPositiveVoteEventFilter;
    TokenOwnersPositiveVote(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): TokenOwnersPositiveVoteEventFilter;

    "WalletProposal(uint256,address)"(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _wallet?: PromiseOrValue<string> | null
    ): WalletProposalEventFilter;
    WalletProposal(
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _wallet?: PromiseOrValue<string> | null
    ): WalletProposalEventFilter;

    "WalletRejection(uint256)"(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): WalletRejectionEventFilter;
    WalletRejection(
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): WalletRejectionEventFilter;
  };

  estimateGas: {
    COMMITEE_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    addCommitteeMembers(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimCommitteeReward(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    committeeMemberVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    committeeMembersCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountReported(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIsVoted(
      _reportId: PromiseOrValue<BigNumberish>,
      _voterIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _voterIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCommitteeMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReportSolved(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    losslessClaim(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    losslessController(overrides?: CallOverrides): Promise<BigNumber>;

    losslessReporting(overrides?: CallOverrides): Promise<BigNumber>;

    losslessStaking(overrides?: CallOverrides): Promise<BigNumber>;

    losslessVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposeWallet(
      _reportId: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rejectWallet(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCommitteeMembers(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportResolution(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveReport(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrieveCompensation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrieveFunds(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCompensationAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDisputePeriod(
      _timeFrame: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenOwnersVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    walletDisputePeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    COMMITEE_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LSS_TEAM_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_OWNER_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCommitteeMembers(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimCommitteeReward(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    committeeMemberVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    committeeMembersCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountReported(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsVoted(
      _reportId: PromiseOrValue<BigNumberish>,
      _voterIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _voterIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCommitteeMember(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReportSolved(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessClaim(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    losslessController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessReporting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposeWallet(
      _reportId: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rejectWallet(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCommitteeMembers(
      _members: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportResolution(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resolveReport(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrieveCompensation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrieveFunds(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCompensationAmount(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDisputePeriod(
      _timeFrame: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenOwnersVote(
      _reportId: PromiseOrValue<BigNumberish>,
      _vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    walletDisputePeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
