/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ILssReportingInterface extends utils.Interface {
  functions: {
    "committeeReward()": FunctionFragment;
    "getReportInfo(uint256)": FunctionFragment;
    "getRewards()": FunctionFragment;
    "getVersion()": FunctionFragment;
    "losslessController()": FunctionFragment;
    "losslessGovernance()": FunctionFragment;
    "losslessReward()": FunctionFragment;
    "pause()": FunctionFragment;
    "report(address,address)": FunctionFragment;
    "reportCount()": FunctionFragment;
    "reportLifetime()": FunctionFragment;
    "reporterClaim(uint256)": FunctionFragment;
    "reporterClaimableAmount(uint256)": FunctionFragment;
    "reporterReward()": FunctionFragment;
    "reportingAmount()": FunctionFragment;
    "retrieveCompensation(address,uint256)": FunctionFragment;
    "secondReport(uint256,address)": FunctionFragment;
    "setCommitteeReward(uint256)": FunctionFragment;
    "setLosslessGovernance(address)": FunctionFragment;
    "setLosslessReward(uint256)": FunctionFragment;
    "setReportLifetime(uint256)": FunctionFragment;
    "setReporterReward(uint256)": FunctionFragment;
    "setReportingAmount(uint256)": FunctionFragment;
    "setStakersReward(uint256)": FunctionFragment;
    "setStakingToken(address)": FunctionFragment;
    "stakersReward()": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "committeeReward"
      | "getReportInfo"
      | "getRewards"
      | "getVersion"
      | "losslessController"
      | "losslessGovernance"
      | "losslessReward"
      | "pause"
      | "report"
      | "reportCount"
      | "reportLifetime"
      | "reporterClaim"
      | "reporterClaimableAmount"
      | "reporterReward"
      | "reportingAmount"
      | "retrieveCompensation"
      | "secondReport"
      | "setCommitteeReward"
      | "setLosslessGovernance"
      | "setLosslessReward"
      | "setReportLifetime"
      | "setReporterReward"
      | "setReportingAmount"
      | "setStakersReward"
      | "setStakingToken"
      | "stakersReward"
      | "stakingToken"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "committeeReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReportInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "report",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reportCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportLifetime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reporterClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reporterClaimableAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reporterReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveCompensation",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "secondReport",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommitteeReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLosslessGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLosslessReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportLifetime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReporterReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportingAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakersReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "committeeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReportInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "losslessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "report", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportLifetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reporterClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reporterClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reporterReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reportingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveCompensation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondReport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommitteeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLosslessGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLosslessReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportLifetime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReporterReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakersReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakersReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "CompensationRetrieve(address,uint256)": EventFragment;
    "NewCommitteeReward(uint256)": EventFragment;
    "NewGovernanceContract(address)": EventFragment;
    "NewLosslessReward(uint256)": EventFragment;
    "NewReportLifetime(uint256)": EventFragment;
    "NewReporterReward(uint256)": EventFragment;
    "NewReportingAmount(uint256)": EventFragment;
    "NewStakersReward(uint256)": EventFragment;
    "NewStakingToken(address)": EventFragment;
    "ReportSubmission(address,address,uint256)": EventFragment;
    "ReporterClaim(address,uint256,uint256)": EventFragment;
    "SecondReportSubmission(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CompensationRetrieve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewCommitteeReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernanceContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLosslessReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReportLifetime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReporterReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReportingAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakersReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakingToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReportSubmission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReporterClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SecondReportSubmission"): EventFragment;
}

export interface CompensationRetrieveEventObject {
  _adr: string;
  _amount: BigNumber;
}
export type CompensationRetrieveEvent = TypedEvent<
  [string, BigNumber],
  CompensationRetrieveEventObject
>;

export type CompensationRetrieveEventFilter =
  TypedEventFilter<CompensationRetrieveEvent>;

export interface NewCommitteeRewardEventObject {
  _newValue: BigNumber;
}
export type NewCommitteeRewardEvent = TypedEvent<
  [BigNumber],
  NewCommitteeRewardEventObject
>;

export type NewCommitteeRewardEventFilter =
  TypedEventFilter<NewCommitteeRewardEvent>;

export interface NewGovernanceContractEventObject {
  _adr: string;
}
export type NewGovernanceContractEvent = TypedEvent<
  [string],
  NewGovernanceContractEventObject
>;

export type NewGovernanceContractEventFilter =
  TypedEventFilter<NewGovernanceContractEvent>;

export interface NewLosslessRewardEventObject {
  _newValue: BigNumber;
}
export type NewLosslessRewardEvent = TypedEvent<
  [BigNumber],
  NewLosslessRewardEventObject
>;

export type NewLosslessRewardEventFilter =
  TypedEventFilter<NewLosslessRewardEvent>;

export interface NewReportLifetimeEventObject {
  _newValue: BigNumber;
}
export type NewReportLifetimeEvent = TypedEvent<
  [BigNumber],
  NewReportLifetimeEventObject
>;

export type NewReportLifetimeEventFilter =
  TypedEventFilter<NewReportLifetimeEvent>;

export interface NewReporterRewardEventObject {
  _newValue: BigNumber;
}
export type NewReporterRewardEvent = TypedEvent<
  [BigNumber],
  NewReporterRewardEventObject
>;

export type NewReporterRewardEventFilter =
  TypedEventFilter<NewReporterRewardEvent>;

export interface NewReportingAmountEventObject {
  _newAmount: BigNumber;
}
export type NewReportingAmountEvent = TypedEvent<
  [BigNumber],
  NewReportingAmountEventObject
>;

export type NewReportingAmountEventFilter =
  TypedEventFilter<NewReportingAmountEvent>;

export interface NewStakersRewardEventObject {
  _newValue: BigNumber;
}
export type NewStakersRewardEvent = TypedEvent<
  [BigNumber],
  NewStakersRewardEventObject
>;

export type NewStakersRewardEventFilter =
  TypedEventFilter<NewStakersRewardEvent>;

export interface NewStakingTokenEventObject {
  _token: string;
}
export type NewStakingTokenEvent = TypedEvent<
  [string],
  NewStakingTokenEventObject
>;

export type NewStakingTokenEventFilter = TypedEventFilter<NewStakingTokenEvent>;

export interface ReportSubmissionEventObject {
  _token: string;
  _account: string;
  _reportId: BigNumber;
}
export type ReportSubmissionEvent = TypedEvent<
  [string, string, BigNumber],
  ReportSubmissionEventObject
>;

export type ReportSubmissionEventFilter =
  TypedEventFilter<ReportSubmissionEvent>;

export interface ReporterClaimEventObject {
  _reporter: string;
  _reportId: BigNumber;
  _amount: BigNumber;
}
export type ReporterClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ReporterClaimEventObject
>;

export type ReporterClaimEventFilter = TypedEventFilter<ReporterClaimEvent>;

export interface SecondReportSubmissionEventObject {
  _token: string;
  _account: string;
  _reportId: BigNumber;
}
export type SecondReportSubmissionEvent = TypedEvent<
  [string, string, BigNumber],
  SecondReportSubmissionEventObject
>;

export type SecondReportSubmissionEventFilter =
  TypedEventFilter<SecondReportSubmissionEvent>;

export interface ILssReporting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILssReportingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    committeeReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getReportInfo(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, boolean, boolean] & {
        _reporter: string;
        _reportedAddress: string;
        _secondReportedAddress: string;
        _reportTimestamps: BigNumber;
        _reportTokens: string;
        _secondReports: boolean;
        _reporterClaimStatus: boolean;
      }
    >;

    getRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _reporter: BigNumber;
        _lossless: BigNumber;
        _committee: BigNumber;
        _stakers: BigNumber;
      }
    >;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    losslessController(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    losslessGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    losslessReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    report(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportLifetime(overrides?: CallOverrides): Promise<[BigNumber]>;

    reporterClaim(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reporterClaimableAmount(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reporterReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reportingAmount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrieveCompensation(
      _adr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    secondReport(
      _reportId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCommitteeReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLosslessGovernance(
      _losslessGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLosslessReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReportLifetime(
      _lifetime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReporterReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReportingAmount(
      _reportingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakersReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingToken(
      _stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakersReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  committeeReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getReportInfo(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, boolean, boolean] & {
      _reporter: string;
      _reportedAddress: string;
      _secondReportedAddress: string;
      _reportTimestamps: BigNumber;
      _reportTokens: string;
      _secondReports: boolean;
      _reporterClaimStatus: boolean;
    }
  >;

  getRewards(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _reporter: BigNumber;
      _lossless: BigNumber;
      _committee: BigNumber;
      _stakers: BigNumber;
    }
  >;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  losslessController(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  losslessGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  losslessReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  report(
    _token: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportCount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportLifetime(overrides?: CallOverrides): Promise<BigNumber>;

  reporterClaim(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reporterClaimableAmount(
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reporterReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reportingAmount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrieveCompensation(
    _adr: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  secondReport(
    _reportId: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCommitteeReward(
    _reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLosslessGovernance(
    _losslessGovernance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLosslessReward(
    _reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReportLifetime(
    _lifetime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReporterReward(
    _reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReportingAmount(
    _reportingAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakersReward(
    _reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingToken(
    _stakingToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakersReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingToken(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    committeeReward(overrides?: CallOverrides): Promise<BigNumber>;

    getReportInfo(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, boolean, boolean] & {
        _reporter: string;
        _reportedAddress: string;
        _secondReportedAddress: string;
        _reportTimestamps: BigNumber;
        _reportTokens: string;
        _secondReports: boolean;
        _reporterClaimStatus: boolean;
      }
    >;

    getRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _reporter: BigNumber;
        _lossless: BigNumber;
        _committee: BigNumber;
        _stakers: BigNumber;
      }
    >;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    losslessController(overrides?: CallOverrides): Promise<string>;

    losslessGovernance(overrides?: CallOverrides): Promise<string>;

    losslessReward(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    report(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reportCount(overrides?: CallOverrides): Promise<BigNumber>;

    reportLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    reporterClaim(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reporterClaimableAmount(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reporterReward(overrides?: CallOverrides): Promise<BigNumber>;

    reportingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    retrieveCompensation(
      _adr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    secondReport(
      _reportId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommitteeReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLosslessGovernance(
      _losslessGovernance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLosslessReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportLifetime(
      _lifetime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReporterReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportingAmount(
      _reportingAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakersReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingToken(
      _stakingToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakersReward(overrides?: CallOverrides): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CompensationRetrieve(address,uint256)"(
      _adr?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): CompensationRetrieveEventFilter;
    CompensationRetrieve(
      _adr?: PromiseOrValue<string> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): CompensationRetrieveEventFilter;

    "NewCommitteeReward(uint256)"(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewCommitteeRewardEventFilter;
    NewCommitteeReward(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewCommitteeRewardEventFilter;

    "NewGovernanceContract(address)"(
      _adr?: PromiseOrValue<string> | null
    ): NewGovernanceContractEventFilter;
    NewGovernanceContract(
      _adr?: PromiseOrValue<string> | null
    ): NewGovernanceContractEventFilter;

    "NewLosslessReward(uint256)"(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewLosslessRewardEventFilter;
    NewLosslessReward(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewLosslessRewardEventFilter;

    "NewReportLifetime(uint256)"(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewReportLifetimeEventFilter;
    NewReportLifetime(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewReportLifetimeEventFilter;

    "NewReporterReward(uint256)"(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewReporterRewardEventFilter;
    NewReporterReward(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewReporterRewardEventFilter;

    "NewReportingAmount(uint256)"(
      _newAmount?: PromiseOrValue<BigNumberish> | null
    ): NewReportingAmountEventFilter;
    NewReportingAmount(
      _newAmount?: PromiseOrValue<BigNumberish> | null
    ): NewReportingAmountEventFilter;

    "NewStakersReward(uint256)"(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewStakersRewardEventFilter;
    NewStakersReward(
      _newValue?: PromiseOrValue<BigNumberish> | null
    ): NewStakersRewardEventFilter;

    "NewStakingToken(address)"(
      _token?: PromiseOrValue<string> | null
    ): NewStakingTokenEventFilter;
    NewStakingToken(
      _token?: PromiseOrValue<string> | null
    ): NewStakingTokenEventFilter;

    "ReportSubmission(address,address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _account?: PromiseOrValue<string> | null,
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): ReportSubmissionEventFilter;
    ReportSubmission(
      _token?: PromiseOrValue<string> | null,
      _account?: PromiseOrValue<string> | null,
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): ReportSubmissionEventFilter;

    "ReporterClaim(address,uint256,uint256)"(
      _reporter?: PromiseOrValue<string> | null,
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): ReporterClaimEventFilter;
    ReporterClaim(
      _reporter?: PromiseOrValue<string> | null,
      _reportId?: PromiseOrValue<BigNumberish> | null,
      _amount?: PromiseOrValue<BigNumberish> | null
    ): ReporterClaimEventFilter;

    "SecondReportSubmission(address,address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _account?: PromiseOrValue<string> | null,
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): SecondReportSubmissionEventFilter;
    SecondReportSubmission(
      _token?: PromiseOrValue<string> | null,
      _account?: PromiseOrValue<string> | null,
      _reportId?: PromiseOrValue<BigNumberish> | null
    ): SecondReportSubmissionEventFilter;
  };

  estimateGas: {
    committeeReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getReportInfo(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    losslessController(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    losslessGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    losslessReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    report(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportLifetime(overrides?: CallOverrides): Promise<BigNumber>;

    reporterClaim(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reporterClaimableAmount(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reporterReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reportingAmount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrieveCompensation(
      _adr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    secondReport(
      _reportId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCommitteeReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLosslessGovernance(
      _losslessGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLosslessReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReportLifetime(
      _lifetime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReporterReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReportingAmount(
      _reportingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakersReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingToken(
      _stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakersReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    committeeReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getReportInfo(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessController(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    losslessGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    losslessReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    report(
      _token: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportCount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportLifetime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reporterClaim(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reporterClaimableAmount(
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reporterReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reportingAmount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrieveCompensation(
      _adr: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    secondReport(
      _reportId: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCommitteeReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLosslessGovernance(
      _losslessGovernance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLosslessReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReportLifetime(
      _lifetime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReporterReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReportingAmount(
      _reportingAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakersReward(
      _reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingToken(
      _stakingToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakersReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
