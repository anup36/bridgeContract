/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ILssControllerInterface extends utils.Interface {
  functions: {
    "activateEmergency(address)": FunctionFragment;
    "addToBlacklist(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "beforeApprove(address,address,uint256)": FunctionFragment;
    "beforeBurn(address,uint256)": FunctionFragment;
    "beforeDecreaseAllowance(address,address,uint256)": FunctionFragment;
    "beforeIncreaseAllowance(address,address,uint256)": FunctionFragment;
    "beforeMint(address,uint256)": FunctionFragment;
    "beforeTransfer(address,address,uint256)": FunctionFragment;
    "beforeTransferFrom(address,address,address,uint256)": FunctionFragment;
    "blacklist(address)": FunctionFragment;
    "deactivateEmergency(address)": FunctionFragment;
    "dexList(address)": FunctionFragment;
    "dexTranferThreshold()": FunctionFragment;
    "executeNewSettlementPeriod(address)": FunctionFragment;
    "guardian()": FunctionFragment;
    "losslessGovernance()": FunctionFragment;
    "losslessReporting()": FunctionFragment;
    "losslessStaking()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseAdmin()": FunctionFragment;
    "proposeNewSettlementPeriod(address,uint256)": FunctionFragment;
    "recoveryAdmin()": FunctionFragment;
    "removeProtectedAddress(address,address)": FunctionFragment;
    "resolvedNegatively(address)": FunctionFragment;
    "retrieveBlacklistedFunds(address[],address,uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setDexList(address[],bool)": FunctionFragment;
    "setDexTransferThreshold(uint256)": FunctionFragment;
    "setGovernanceContractAddress(address)": FunctionFragment;
    "setGuardian(address)": FunctionFragment;
    "setPauseAdmin(address)": FunctionFragment;
    "setProtectedAddress(address,address,address)": FunctionFragment;
    "setRecoveryAdmin(address)": FunctionFragment;
    "setReportingContractAddress(address)": FunctionFragment;
    "setSettlementTimeLock(uint256)": FunctionFragment;
    "setStakingContractAddress(address)": FunctionFragment;
    "setWhitelist(address[],bool)": FunctionFragment;
    "settlementTimeLock()": FunctionFragment;
    "unpause()": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateEmergency"
      | "addToBlacklist"
      | "admin"
      | "beforeApprove"
      | "beforeBurn"
      | "beforeDecreaseAllowance"
      | "beforeIncreaseAllowance"
      | "beforeMint"
      | "beforeTransfer"
      | "beforeTransferFrom"
      | "blacklist"
      | "deactivateEmergency"
      | "dexList"
      | "dexTranferThreshold"
      | "executeNewSettlementPeriod"
      | "guardian"
      | "losslessGovernance"
      | "losslessReporting"
      | "losslessStaking"
      | "pause"
      | "pauseAdmin"
      | "proposeNewSettlementPeriod"
      | "recoveryAdmin"
      | "removeProtectedAddress"
      | "resolvedNegatively"
      | "retrieveBlacklistedFunds"
      | "setAdmin"
      | "setDexList"
      | "setDexTransferThreshold"
      | "setGovernanceContractAddress"
      | "setGuardian"
      | "setPauseAdmin"
      | "setProtectedAddress"
      | "setRecoveryAdmin"
      | "setReportingContractAddress"
      | "setSettlementTimeLock"
      | "setStakingContractAddress"
      | "setWhitelist"
      | "settlementTimeLock"
      | "unpause"
      | "whitelist"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateEmergency",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToBlacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "beforeApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeBurn",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDecreaseAllowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeIncreaseAllowance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeMint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateEmergency",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dexList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "dexTranferThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeNewSettlementPeriod",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "losslessGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessReporting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewSettlementPeriod",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeProtectedAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resolvedNegatively",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveBlacklistedFunds",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexList",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDexTransferThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernanceContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtectedAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReportingContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementTimeLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementTimeLock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelist",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeDecreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeIncreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beforeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateEmergency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dexTranferThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeNewSettlementPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "losslessGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessReporting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewSettlementPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeProtectedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolvedNegatively",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveBlacklistedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDexList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDexTransferThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtectedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReportingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementTimeLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "AccountBlacklistRemoval(address)": EventFragment;
    "AdminChange(address)": EventFragment;
    "DexRemoval(address)": EventFragment;
    "EmergencyActive(address)": EventFragment;
    "EmergencyDeactivation(address)": EventFragment;
    "GuardianSet(address,address)": EventFragment;
    "NewBlacklistedAddress(address)": EventFragment;
    "NewDex(address)": EventFragment;
    "NewDexThreshold(uint256)": EventFragment;
    "NewGovernanceContract(address)": EventFragment;
    "NewProtectedAddress(address,address,address)": EventFragment;
    "NewReportingContract(address)": EventFragment;
    "NewSettlementPeriodProposal(address,uint256)": EventFragment;
    "NewSettlementTimelock(uint256)": EventFragment;
    "NewStakingContract(address)": EventFragment;
    "NewWhitelistedAddress(address)": EventFragment;
    "PauseAdminChange(address)": EventFragment;
    "RecoveryAdminChange(address)": EventFragment;
    "RemovedProtectedAddress(address,address)": EventFragment;
    "SettlementPeriodChange(address,uint256)": EventFragment;
    "WhitelistedAddressRemoval(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBlacklistRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DexRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyActive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyDeactivation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBlacklistedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDexThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernanceContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProtectedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewReportingContract"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewSettlementPeriodProposal"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSettlementTimelock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewStakingContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewWhitelistedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseAdminChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryAdminChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedProtectedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementPeriodChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedAddressRemoval"): EventFragment;
}

export interface AccountBlacklistRemovalEventObject {
  _adr: string;
}
export type AccountBlacklistRemovalEvent = TypedEvent<
  [string],
  AccountBlacklistRemovalEventObject
>;

export type AccountBlacklistRemovalEventFilter =
  TypedEventFilter<AccountBlacklistRemovalEvent>;

export interface AdminChangeEventObject {
  _newAdmin: string;
}
export type AdminChangeEvent = TypedEvent<[string], AdminChangeEventObject>;

export type AdminChangeEventFilter = TypedEventFilter<AdminChangeEvent>;

export interface DexRemovalEventObject {
  _dexAddress: string;
}
export type DexRemovalEvent = TypedEvent<[string], DexRemovalEventObject>;

export type DexRemovalEventFilter = TypedEventFilter<DexRemovalEvent>;

export interface EmergencyActiveEventObject {
  _token: string;
}
export type EmergencyActiveEvent = TypedEvent<
  [string],
  EmergencyActiveEventObject
>;

export type EmergencyActiveEventFilter = TypedEventFilter<EmergencyActiveEvent>;

export interface EmergencyDeactivationEventObject {
  _token: string;
}
export type EmergencyDeactivationEvent = TypedEvent<
  [string],
  EmergencyDeactivationEventObject
>;

export type EmergencyDeactivationEventFilter =
  TypedEventFilter<EmergencyDeactivationEvent>;

export interface GuardianSetEventObject {
  _oldGuardian: string;
  _newGuardian: string;
}
export type GuardianSetEvent = TypedEvent<
  [string, string],
  GuardianSetEventObject
>;

export type GuardianSetEventFilter = TypedEventFilter<GuardianSetEvent>;

export interface NewBlacklistedAddressEventObject {
  _blacklistedAddres: string;
}
export type NewBlacklistedAddressEvent = TypedEvent<
  [string],
  NewBlacklistedAddressEventObject
>;

export type NewBlacklistedAddressEventFilter =
  TypedEventFilter<NewBlacklistedAddressEvent>;

export interface NewDexEventObject {
  _dexAddress: string;
}
export type NewDexEvent = TypedEvent<[string], NewDexEventObject>;

export type NewDexEventFilter = TypedEventFilter<NewDexEvent>;

export interface NewDexThresholdEventObject {
  _newThreshold: BigNumber;
}
export type NewDexThresholdEvent = TypedEvent<
  [BigNumber],
  NewDexThresholdEventObject
>;

export type NewDexThresholdEventFilter = TypedEventFilter<NewDexThresholdEvent>;

export interface NewGovernanceContractEventObject {
  _newAdr: string;
}
export type NewGovernanceContractEvent = TypedEvent<
  [string],
  NewGovernanceContractEventObject
>;

export type NewGovernanceContractEventFilter =
  TypedEventFilter<NewGovernanceContractEvent>;

export interface NewProtectedAddressEventObject {
  _token: string;
  _protectedAddress: string;
  _strategy: string;
}
export type NewProtectedAddressEvent = TypedEvent<
  [string, string, string],
  NewProtectedAddressEventObject
>;

export type NewProtectedAddressEventFilter =
  TypedEventFilter<NewProtectedAddressEvent>;

export interface NewReportingContractEventObject {
  _newAdr: string;
}
export type NewReportingContractEvent = TypedEvent<
  [string],
  NewReportingContractEventObject
>;

export type NewReportingContractEventFilter =
  TypedEventFilter<NewReportingContractEvent>;

export interface NewSettlementPeriodProposalEventObject {
  _token: string;
  _seconds: BigNumber;
}
export type NewSettlementPeriodProposalEvent = TypedEvent<
  [string, BigNumber],
  NewSettlementPeriodProposalEventObject
>;

export type NewSettlementPeriodProposalEventFilter =
  TypedEventFilter<NewSettlementPeriodProposalEvent>;

export interface NewSettlementTimelockEventObject {
  _timelock: BigNumber;
}
export type NewSettlementTimelockEvent = TypedEvent<
  [BigNumber],
  NewSettlementTimelockEventObject
>;

export type NewSettlementTimelockEventFilter =
  TypedEventFilter<NewSettlementTimelockEvent>;

export interface NewStakingContractEventObject {
  _newAdr: string;
}
export type NewStakingContractEvent = TypedEvent<
  [string],
  NewStakingContractEventObject
>;

export type NewStakingContractEventFilter =
  TypedEventFilter<NewStakingContractEvent>;

export interface NewWhitelistedAddressEventObject {
  _whitelistAdr: string;
}
export type NewWhitelistedAddressEvent = TypedEvent<
  [string],
  NewWhitelistedAddressEventObject
>;

export type NewWhitelistedAddressEventFilter =
  TypedEventFilter<NewWhitelistedAddressEvent>;

export interface PauseAdminChangeEventObject {
  _newAdmin: string;
}
export type PauseAdminChangeEvent = TypedEvent<
  [string],
  PauseAdminChangeEventObject
>;

export type PauseAdminChangeEventFilter =
  TypedEventFilter<PauseAdminChangeEvent>;

export interface RecoveryAdminChangeEventObject {
  _newAdmin: string;
}
export type RecoveryAdminChangeEvent = TypedEvent<
  [string],
  RecoveryAdminChangeEventObject
>;

export type RecoveryAdminChangeEventFilter =
  TypedEventFilter<RecoveryAdminChangeEvent>;

export interface RemovedProtectedAddressEventObject {
  _token: string;
  _protectedAddress: string;
}
export type RemovedProtectedAddressEvent = TypedEvent<
  [string, string],
  RemovedProtectedAddressEventObject
>;

export type RemovedProtectedAddressEventFilter =
  TypedEventFilter<RemovedProtectedAddressEvent>;

export interface SettlementPeriodChangeEventObject {
  _token: string;
  _proposedTokenLockTimeframe: BigNumber;
}
export type SettlementPeriodChangeEvent = TypedEvent<
  [string, BigNumber],
  SettlementPeriodChangeEventObject
>;

export type SettlementPeriodChangeEventFilter =
  TypedEventFilter<SettlementPeriodChangeEvent>;

export interface WhitelistedAddressRemovalEventObject {
  _whitelistAdr: string;
}
export type WhitelistedAddressRemovalEvent = TypedEvent<
  [string],
  WhitelistedAddressRemovalEventObject
>;

export type WhitelistedAddressRemovalEventFilter =
  TypedEventFilter<WhitelistedAddressRemovalEvent>;

export interface ILssController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILssControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateEmergency(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToBlacklist(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    beforeApprove(
      _sender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeBurn(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeDecreaseAllowance(
      _msgSender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeIncreaseAllowance(
      _msgSender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeMint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeTransfer(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeTransferFrom(
      _msgSender: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blacklist(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deactivateEmergency(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dexList(
      _dexAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dexTranferThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeNewSettlementPeriod(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    guardian(overrides?: CallOverrides): Promise<[string]>;

    losslessGovernance(overrides?: CallOverrides): Promise<[string]>;

    losslessReporting(overrides?: CallOverrides): Promise<[string]>;

    losslessStaking(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseAdmin(overrides?: CallOverrides): Promise<[string]>;

    proposeNewSettlementPeriod(
      _token: PromiseOrValue<string>,
      _seconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoveryAdmin(overrides?: CallOverrides): Promise<[string]>;

    removeProtectedAddress(
      _token: PromiseOrValue<string>,
      _protectedAddresss: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolvedNegatively(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retrieveBlacklistedFunds(
      _addresses: PromiseOrValue<string>[],
      _token: PromiseOrValue<string>,
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDexList(
      _dexList: PromiseOrValue<string>[],
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDexTransferThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernanceContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPauseAdmin(
      _newPauseAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtectedAddress(
      _token: PromiseOrValue<string>,
      _protectedAddress: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRecoveryAdmin(
      _newRecoveryAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReportingContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSettlementTimeLock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhitelist(
      _addrList: PromiseOrValue<string>[],
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settlementTimeLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelist(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  activateEmergency(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToBlacklist(
    _adr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  beforeApprove(
    _sender: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeBurn(
    _account: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeDecreaseAllowance(
    _msgSender: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeIncreaseAllowance(
    _msgSender: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    _addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeMint(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeTransfer(
    _sender: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeTransferFrom(
    _msgSender: PromiseOrValue<string>,
    _sender: PromiseOrValue<string>,
    _recipient: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blacklist(
    _adr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deactivateEmergency(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dexList(
    _dexAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dexTranferThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  executeNewSettlementPeriod(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  guardian(overrides?: CallOverrides): Promise<string>;

  losslessGovernance(overrides?: CallOverrides): Promise<string>;

  losslessReporting(overrides?: CallOverrides): Promise<string>;

  losslessStaking(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseAdmin(overrides?: CallOverrides): Promise<string>;

  proposeNewSettlementPeriod(
    _token: PromiseOrValue<string>,
    _seconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoveryAdmin(overrides?: CallOverrides): Promise<string>;

  removeProtectedAddress(
    _token: PromiseOrValue<string>,
    _protectedAddresss: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolvedNegatively(
    _adr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retrieveBlacklistedFunds(
    _addresses: PromiseOrValue<string>[],
    _token: PromiseOrValue<string>,
    _reportId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDexList(
    _dexList: PromiseOrValue<string>[],
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDexTransferThreshold(
    _newThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernanceContractAddress(
    _adr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGuardian(
    _newGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPauseAdmin(
    _newPauseAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtectedAddress(
    _token: PromiseOrValue<string>,
    _protectedAddress: PromiseOrValue<string>,
    _strategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRecoveryAdmin(
    _newRecoveryAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReportingContractAddress(
    _adr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSettlementTimeLock(
    _newTimelock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingContractAddress(
    _adr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhitelist(
    _addrList: PromiseOrValue<string>[],
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settlementTimeLock(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelist(
    _adr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    activateEmergency(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToBlacklist(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    beforeApprove(
      _sender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeBurn(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeDecreaseAllowance(
      _msgSender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeIncreaseAllowance(
      _msgSender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeMint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeTransfer(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeTransferFrom(
      _msgSender: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklist(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deactivateEmergency(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dexList(
      _dexAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dexTranferThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    executeNewSettlementPeriod(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    guardian(overrides?: CallOverrides): Promise<string>;

    losslessGovernance(overrides?: CallOverrides): Promise<string>;

    losslessReporting(overrides?: CallOverrides): Promise<string>;

    losslessStaking(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseAdmin(overrides?: CallOverrides): Promise<string>;

    proposeNewSettlementPeriod(
      _token: PromiseOrValue<string>,
      _seconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoveryAdmin(overrides?: CallOverrides): Promise<string>;

    removeProtectedAddress(
      _token: PromiseOrValue<string>,
      _protectedAddresss: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolvedNegatively(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveBlacklistedFunds(
      _addresses: PromiseOrValue<string>[],
      _token: PromiseOrValue<string>,
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDexList(
      _dexList: PromiseOrValue<string>[],
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDexTransferThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernanceContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseAdmin(
      _newPauseAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtectedAddress(
      _token: PromiseOrValue<string>,
      _protectedAddress: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecoveryAdmin(
      _newRecoveryAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReportingContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSettlementTimeLock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(
      _addrList: PromiseOrValue<string>[],
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    settlementTimeLock(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    whitelist(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AccountBlacklistRemoval(address)"(
      _adr?: PromiseOrValue<string> | null
    ): AccountBlacklistRemovalEventFilter;
    AccountBlacklistRemoval(
      _adr?: PromiseOrValue<string> | null
    ): AccountBlacklistRemovalEventFilter;

    "AdminChange(address)"(
      _newAdmin?: PromiseOrValue<string> | null
    ): AdminChangeEventFilter;
    AdminChange(
      _newAdmin?: PromiseOrValue<string> | null
    ): AdminChangeEventFilter;

    "DexRemoval(address)"(
      _dexAddress?: PromiseOrValue<string> | null
    ): DexRemovalEventFilter;
    DexRemoval(
      _dexAddress?: PromiseOrValue<string> | null
    ): DexRemovalEventFilter;

    "EmergencyActive(address)"(
      _token?: PromiseOrValue<string> | null
    ): EmergencyActiveEventFilter;
    EmergencyActive(
      _token?: PromiseOrValue<string> | null
    ): EmergencyActiveEventFilter;

    "EmergencyDeactivation(address)"(
      _token?: PromiseOrValue<string> | null
    ): EmergencyDeactivationEventFilter;
    EmergencyDeactivation(
      _token?: PromiseOrValue<string> | null
    ): EmergencyDeactivationEventFilter;

    "GuardianSet(address,address)"(
      _oldGuardian?: PromiseOrValue<string> | null,
      _newGuardian?: PromiseOrValue<string> | null
    ): GuardianSetEventFilter;
    GuardianSet(
      _oldGuardian?: PromiseOrValue<string> | null,
      _newGuardian?: PromiseOrValue<string> | null
    ): GuardianSetEventFilter;

    "NewBlacklistedAddress(address)"(
      _blacklistedAddres?: PromiseOrValue<string> | null
    ): NewBlacklistedAddressEventFilter;
    NewBlacklistedAddress(
      _blacklistedAddres?: PromiseOrValue<string> | null
    ): NewBlacklistedAddressEventFilter;

    "NewDex(address)"(
      _dexAddress?: PromiseOrValue<string> | null
    ): NewDexEventFilter;
    NewDex(_dexAddress?: PromiseOrValue<string> | null): NewDexEventFilter;

    "NewDexThreshold(uint256)"(
      _newThreshold?: PromiseOrValue<BigNumberish> | null
    ): NewDexThresholdEventFilter;
    NewDexThreshold(
      _newThreshold?: PromiseOrValue<BigNumberish> | null
    ): NewDexThresholdEventFilter;

    "NewGovernanceContract(address)"(
      _newAdr?: PromiseOrValue<string> | null
    ): NewGovernanceContractEventFilter;
    NewGovernanceContract(
      _newAdr?: PromiseOrValue<string> | null
    ): NewGovernanceContractEventFilter;

    "NewProtectedAddress(address,address,address)"(
      _token?: PromiseOrValue<string> | null,
      _protectedAddress?: PromiseOrValue<string> | null,
      _strategy?: PromiseOrValue<string> | null
    ): NewProtectedAddressEventFilter;
    NewProtectedAddress(
      _token?: PromiseOrValue<string> | null,
      _protectedAddress?: PromiseOrValue<string> | null,
      _strategy?: PromiseOrValue<string> | null
    ): NewProtectedAddressEventFilter;

    "NewReportingContract(address)"(
      _newAdr?: PromiseOrValue<string> | null
    ): NewReportingContractEventFilter;
    NewReportingContract(
      _newAdr?: PromiseOrValue<string> | null
    ): NewReportingContractEventFilter;

    "NewSettlementPeriodProposal(address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _seconds?: null
    ): NewSettlementPeriodProposalEventFilter;
    NewSettlementPeriodProposal(
      _token?: PromiseOrValue<string> | null,
      _seconds?: null
    ): NewSettlementPeriodProposalEventFilter;

    "NewSettlementTimelock(uint256)"(
      _timelock?: PromiseOrValue<BigNumberish> | null
    ): NewSettlementTimelockEventFilter;
    NewSettlementTimelock(
      _timelock?: PromiseOrValue<BigNumberish> | null
    ): NewSettlementTimelockEventFilter;

    "NewStakingContract(address)"(
      _newAdr?: PromiseOrValue<string> | null
    ): NewStakingContractEventFilter;
    NewStakingContract(
      _newAdr?: PromiseOrValue<string> | null
    ): NewStakingContractEventFilter;

    "NewWhitelistedAddress(address)"(
      _whitelistAdr?: PromiseOrValue<string> | null
    ): NewWhitelistedAddressEventFilter;
    NewWhitelistedAddress(
      _whitelistAdr?: PromiseOrValue<string> | null
    ): NewWhitelistedAddressEventFilter;

    "PauseAdminChange(address)"(
      _newAdmin?: PromiseOrValue<string> | null
    ): PauseAdminChangeEventFilter;
    PauseAdminChange(
      _newAdmin?: PromiseOrValue<string> | null
    ): PauseAdminChangeEventFilter;

    "RecoveryAdminChange(address)"(
      _newAdmin?: PromiseOrValue<string> | null
    ): RecoveryAdminChangeEventFilter;
    RecoveryAdminChange(
      _newAdmin?: PromiseOrValue<string> | null
    ): RecoveryAdminChangeEventFilter;

    "RemovedProtectedAddress(address,address)"(
      _token?: PromiseOrValue<string> | null,
      _protectedAddress?: PromiseOrValue<string> | null
    ): RemovedProtectedAddressEventFilter;
    RemovedProtectedAddress(
      _token?: PromiseOrValue<string> | null,
      _protectedAddress?: PromiseOrValue<string> | null
    ): RemovedProtectedAddressEventFilter;

    "SettlementPeriodChange(address,uint256)"(
      _token?: PromiseOrValue<string> | null,
      _proposedTokenLockTimeframe?: null
    ): SettlementPeriodChangeEventFilter;
    SettlementPeriodChange(
      _token?: PromiseOrValue<string> | null,
      _proposedTokenLockTimeframe?: null
    ): SettlementPeriodChangeEventFilter;

    "WhitelistedAddressRemoval(address)"(
      _whitelistAdr?: PromiseOrValue<string> | null
    ): WhitelistedAddressRemovalEventFilter;
    WhitelistedAddressRemoval(
      _whitelistAdr?: PromiseOrValue<string> | null
    ): WhitelistedAddressRemovalEventFilter;
  };

  estimateGas: {
    activateEmergency(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToBlacklist(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    beforeApprove(
      _sender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeBurn(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeDecreaseAllowance(
      _msgSender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeIncreaseAllowance(
      _msgSender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeMint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeTransfer(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeTransferFrom(
      _msgSender: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blacklist(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deactivateEmergency(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dexList(
      _dexAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dexTranferThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    executeNewSettlementPeriod(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    losslessGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    losslessReporting(overrides?: CallOverrides): Promise<BigNumber>;

    losslessStaking(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    proposeNewSettlementPeriod(
      _token: PromiseOrValue<string>,
      _seconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoveryAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    removeProtectedAddress(
      _token: PromiseOrValue<string>,
      _protectedAddresss: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolvedNegatively(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retrieveBlacklistedFunds(
      _addresses: PromiseOrValue<string>[],
      _token: PromiseOrValue<string>,
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDexList(
      _dexList: PromiseOrValue<string>[],
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDexTransferThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernanceContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPauseAdmin(
      _newPauseAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtectedAddress(
      _token: PromiseOrValue<string>,
      _protectedAddress: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRecoveryAdmin(
      _newRecoveryAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReportingContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSettlementTimeLock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhitelist(
      _addrList: PromiseOrValue<string>[],
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settlementTimeLock(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelist(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateEmergency(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToBlacklist(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beforeApprove(
      _sender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeBurn(
      _account: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeDecreaseAllowance(
      _msgSender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeIncreaseAllowance(
      _msgSender: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      _addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeMint(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeTransfer(
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeTransferFrom(
      _msgSender: PromiseOrValue<string>,
      _sender: PromiseOrValue<string>,
      _recipient: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blacklist(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deactivateEmergency(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dexList(
      _dexAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dexTranferThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeNewSettlementPeriod(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessReporting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    losslessStaking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeNewSettlementPeriod(
      _token: PromiseOrValue<string>,
      _seconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoveryAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeProtectedAddress(
      _token: PromiseOrValue<string>,
      _protectedAddresss: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolvedNegatively(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retrieveBlacklistedFunds(
      _addresses: PromiseOrValue<string>[],
      _token: PromiseOrValue<string>,
      _reportId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDexList(
      _dexList: PromiseOrValue<string>[],
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDexTransferThreshold(
      _newThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernanceContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGuardian(
      _newGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPauseAdmin(
      _newPauseAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtectedAddress(
      _token: PromiseOrValue<string>,
      _protectedAddress: PromiseOrValue<string>,
      _strategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRecoveryAdmin(
      _newRecoveryAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReportingContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSettlementTimeLock(
      _newTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingContractAddress(
      _adr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _addrList: PromiseOrValue<string>[],
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settlementTimeLock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      _adr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
