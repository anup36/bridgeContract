/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IsettingsInterface extends utils.Interface {
  functions: {
    "approvedToAdd(address,address)": FunctionFragment;
    "baseFeeEnable()": FunctionFragment;
    "baseFeePercentage()": FunctionFragment;
    "brgToken()": FunctionFragment;
    "feeRemitance()": FunctionFragment;
    "gasBank()": FunctionFragment;
    "getNetworkSupportedChains()": FunctionFragment;
    "isNetworkSupportedChain(uint256)": FunctionFragment;
    "maxFeeThreshold()": FunctionFragment;
    "minValidations()": FunctionFragment;
    "minWithdrawableFee()": FunctionFragment;
    "networkFee(uint256)": FunctionFragment;
    "networkGas(uint256)": FunctionFragment;
    "onlyOwnableRail()": FunctionFragment;
    "railOwnerFeeShare()": FunctionFragment;
    "railRegistrationFee()": FunctionFragment;
    "updatableAssetState()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approvedToAdd"
      | "baseFeeEnable"
      | "baseFeePercentage"
      | "brgToken"
      | "feeRemitance"
      | "gasBank"
      | "getNetworkSupportedChains"
      | "isNetworkSupportedChain"
      | "maxFeeThreshold"
      | "minValidations"
      | "minWithdrawableFee"
      | "networkFee"
      | "networkGas"
      | "onlyOwnableRail"
      | "railOwnerFeeShare"
      | "railRegistrationFee"
      | "updatableAssetState"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approvedToAdd",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseFeeEnable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "brgToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRemitance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasBank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNetworkSupportedChains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNetworkSupportedChain",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFeeThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minValidations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minWithdrawableFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "networkGas",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onlyOwnableRail",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "railOwnerFeeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "railRegistrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatableAssetState",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedToAdd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseFeeEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "brgToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRemitance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkSupportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNetworkSupportedChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFeeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWithdrawableFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "networkFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "networkGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onlyOwnableRail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "railOwnerFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "railRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatableAssetState",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Isettings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IsettingsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvedToAdd(
      token: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    baseFeeEnable(overrides?: CallOverrides): Promise<[boolean]>;

    baseFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    brgToken(overrides?: CallOverrides): Promise<[string]>;

    feeRemitance(overrides?: CallOverrides): Promise<[string]>;

    gasBank(overrides?: CallOverrides): Promise<[string]>;

    getNetworkSupportedChains(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isNetworkSupportedChain(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxFeeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    minValidations(overrides?: CallOverrides): Promise<[BigNumber]>;

    minWithdrawableFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    networkFee(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    networkGas(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    onlyOwnableRail(overrides?: CallOverrides): Promise<[boolean]>;

    railOwnerFeeShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    railRegistrationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatableAssetState(overrides?: CallOverrides): Promise<[boolean]>;
  };

  approvedToAdd(
    token: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  baseFeeEnable(overrides?: CallOverrides): Promise<boolean>;

  baseFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  brgToken(overrides?: CallOverrides): Promise<string>;

  feeRemitance(overrides?: CallOverrides): Promise<string>;

  gasBank(overrides?: CallOverrides): Promise<string>;

  getNetworkSupportedChains(overrides?: CallOverrides): Promise<BigNumber[]>;

  isNetworkSupportedChain(
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxFeeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  minValidations(overrides?: CallOverrides): Promise<BigNumber>;

  minWithdrawableFee(overrides?: CallOverrides): Promise<BigNumber>;

  networkFee(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  networkGas(
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  onlyOwnableRail(overrides?: CallOverrides): Promise<boolean>;

  railOwnerFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

  railRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

  updatableAssetState(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    approvedToAdd(
      token: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    baseFeeEnable(overrides?: CallOverrides): Promise<boolean>;

    baseFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    brgToken(overrides?: CallOverrides): Promise<string>;

    feeRemitance(overrides?: CallOverrides): Promise<string>;

    gasBank(overrides?: CallOverrides): Promise<string>;

    getNetworkSupportedChains(overrides?: CallOverrides): Promise<BigNumber[]>;

    isNetworkSupportedChain(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxFeeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    minValidations(overrides?: CallOverrides): Promise<BigNumber>;

    minWithdrawableFee(overrides?: CallOverrides): Promise<BigNumber>;

    networkFee(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkGas(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onlyOwnableRail(overrides?: CallOverrides): Promise<boolean>;

    railOwnerFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

    railRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    updatableAssetState(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    approvedToAdd(
      token: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseFeeEnable(overrides?: CallOverrides): Promise<BigNumber>;

    baseFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    brgToken(overrides?: CallOverrides): Promise<BigNumber>;

    feeRemitance(overrides?: CallOverrides): Promise<BigNumber>;

    gasBank(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkSupportedChains(overrides?: CallOverrides): Promise<BigNumber>;

    isNetworkSupportedChain(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxFeeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    minValidations(overrides?: CallOverrides): Promise<BigNumber>;

    minWithdrawableFee(overrides?: CallOverrides): Promise<BigNumber>;

    networkFee(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    networkGas(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onlyOwnableRail(overrides?: CallOverrides): Promise<BigNumber>;

    railOwnerFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

    railRegistrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    updatableAssetState(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approvedToAdd(
      token: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseFeeEnable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseFeePercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    brgToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRemitance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasBank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetworkSupportedChains(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNetworkSupportedChain(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFeeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minValidations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minWithdrawableFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkFee(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    networkGas(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onlyOwnableRail(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    railOwnerFeeShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    railRegistrationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatableAssetState(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
