/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IbridgeMigratorInterface extends utils.Interface {
  functions: {
    "isDirectSwap(address,uint256)": FunctionFragment;
    "registerForiegnMigration(address,uint256,uint256,uint256,bool,address,address,uint256,bool,address)": FunctionFragment;
    "registerNativeMigration(address,uint256[2],uint256,bool,address,address,uint256[3],bool,uint256[])": FunctionFragment;
    "registry()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "isDirectSwap"
      | "registerForiegnMigration"
      | "registerNativeMigration"
      | "registry"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isDirectSwap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerForiegnMigration",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNativeMigration",
    values: [
      PromiseOrValue<string>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "isDirectSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerForiegnMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNativeMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;

  events: {};
}

export interface IbridgeMigrator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IbridgeMigratorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isDirectSwap(
      assetAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerForiegnMigration(
      foriegnAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      _collectedFees: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      wrappedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNativeMigration(
      assetAddress: PromiseOrValue<string>,
      limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      collectedFees: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeRemitance: PromiseOrValue<string>,
      balances: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      active: PromiseOrValue<boolean>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;
  };

  isDirectSwap(
    assetAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerForiegnMigration(
    foriegnAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    minAmount: PromiseOrValue<BigNumberish>,
    maxAmount: PromiseOrValue<BigNumberish>,
    ownedRail: PromiseOrValue<boolean>,
    manager: PromiseOrValue<string>,
    feeAddress: PromiseOrValue<string>,
    _collectedFees: PromiseOrValue<BigNumberish>,
    directSwap: PromiseOrValue<boolean>,
    wrappedAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNativeMigration(
    assetAddress: PromiseOrValue<string>,
    limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    collectedFees: PromiseOrValue<BigNumberish>,
    ownedRail: PromiseOrValue<boolean>,
    manager: PromiseOrValue<string>,
    feeRemitance: PromiseOrValue<string>,
    balances: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    active: PromiseOrValue<boolean>,
    supportedChains: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    isDirectSwap(
      assetAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerForiegnMigration(
      foriegnAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      _collectedFees: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      wrappedAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerNativeMigration(
      assetAddress: PromiseOrValue<string>,
      limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      collectedFees: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeRemitance: PromiseOrValue<string>,
      balances: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      active: PromiseOrValue<boolean>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    isDirectSwap(
      assetAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerForiegnMigration(
      foriegnAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      _collectedFees: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      wrappedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNativeMigration(
      assetAddress: PromiseOrValue<string>,
      limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      collectedFees: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeRemitance: PromiseOrValue<string>,
      balances: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      active: PromiseOrValue<boolean>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isDirectSwap(
      assetAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerForiegnMigration(
      foriegnAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      minAmount: PromiseOrValue<BigNumberish>,
      maxAmount: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeAddress: PromiseOrValue<string>,
      _collectedFees: PromiseOrValue<BigNumberish>,
      directSwap: PromiseOrValue<boolean>,
      wrappedAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNativeMigration(
      assetAddress: PromiseOrValue<string>,
      limits: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      collectedFees: PromiseOrValue<BigNumberish>,
      ownedRail: PromiseOrValue<boolean>,
      manager: PromiseOrValue<string>,
      feeRemitance: PromiseOrValue<string>,
      balances: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      active: PromiseOrValue<boolean>,
      supportedChains: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
