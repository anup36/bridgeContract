/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface FeeControllerInterface extends utils.Interface {
  functions: {
    "activateAddressExemption(bool)": FunctionFragment;
    "activateBrgHoldingIncentive(bool)": FunctionFragment;
    "activateIndexedTokenIncentive(address)": FunctionFragment;
    "controller()": FunctionFragment;
    "deActivateIndexedTokenIncentive(address)": FunctionFragment;
    "exemptAddress(address,bool)": FunctionFragment;
    "getBridgeFee(address,address)": FunctionFragment;
    "isExempted(address)": FunctionFragment;
    "settings()": FunctionFragment;
    "updatIndexedTokenIncentivePercentage(address,uint256)": FunctionFragment;
    "updateTokenHoldingIncentivePercentage(bytes32,uint256)": FunctionFragment;
    "updateTokenHoldingIncentiveThreshold(bytes32,uint256)": FunctionFragment;
    "updateUserExemptionPercentage(address,uint256)": FunctionFragment;
    "useExemption()": FunctionFragment;
    "useHolderIncentive()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateAddressExemption"
      | "activateBrgHoldingIncentive"
      | "activateIndexedTokenIncentive"
      | "controller"
      | "deActivateIndexedTokenIncentive"
      | "exemptAddress"
      | "getBridgeFee"
      | "isExempted"
      | "settings"
      | "updatIndexedTokenIncentivePercentage"
      | "updateTokenHoldingIncentivePercentage"
      | "updateTokenHoldingIncentiveThreshold"
      | "updateUserExemptionPercentage"
      | "useExemption"
      | "useHolderIncentive"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateAddressExemption",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "activateBrgHoldingIncentive",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "activateIndexedTokenIncentive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deActivateIndexedTokenIncentive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exemptAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeFee",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isExempted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatIndexedTokenIncentivePercentage",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenHoldingIncentivePercentage",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenHoldingIncentiveThreshold",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserExemptionPercentage",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "useExemption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "useHolderIncentive",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "activateAddressExemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateBrgHoldingIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateIndexedTokenIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deActivateIndexedTokenIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exemptAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExempted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatIndexedTokenIncentivePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenHoldingIncentivePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenHoldingIncentiveThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserExemptionPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useExemption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useHolderIncentive",
    data: BytesLike
  ): Result;

  events: {
    "AddressExemptionStatusChanged(bool)": EventFragment;
    "AssetIncentiveStatusChanged(bool)": EventFragment;
    "AssetIncentiveUpdated(address,uint256,uint256)": EventFragment;
    "BrgHoldingIncentiveStatusChanged(bool)": EventFragment;
    "BrgHoldingIncentiveUpdated(uint256,uint256)": EventFragment;
    "BrgHoldingThresholdUpdated(uint256,uint256)": EventFragment;
    "UserIncentiveUpdate(address,uint256,uint256)": EventFragment;
    "userExemptStatusChanged(address,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "AddressExemptionStatusChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetIncentiveStatusChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetIncentiveUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BrgHoldingIncentiveStatusChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrgHoldingIncentiveUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrgHoldingThresholdUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserIncentiveUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "userExemptStatusChanged"): EventFragment;
}

export interface AddressExemptionStatusChangedEventObject {
  status: boolean;
}
export type AddressExemptionStatusChangedEvent = TypedEvent<
  [boolean],
  AddressExemptionStatusChangedEventObject
>;

export type AddressExemptionStatusChangedEventFilter =
  TypedEventFilter<AddressExemptionStatusChangedEvent>;

export interface AssetIncentiveStatusChangedEventObject {
  status: boolean;
}
export type AssetIncentiveStatusChangedEvent = TypedEvent<
  [boolean],
  AssetIncentiveStatusChangedEventObject
>;

export type AssetIncentiveStatusChangedEventFilter =
  TypedEventFilter<AssetIncentiveStatusChangedEvent>;

export interface AssetIncentiveUpdatedEventObject {
  asset: string;
  oldIncentive: BigNumber;
  newIncentive: BigNumber;
}
export type AssetIncentiveUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AssetIncentiveUpdatedEventObject
>;

export type AssetIncentiveUpdatedEventFilter =
  TypedEventFilter<AssetIncentiveUpdatedEvent>;

export interface BrgHoldingIncentiveStatusChangedEventObject {
  status: boolean;
}
export type BrgHoldingIncentiveStatusChangedEvent = TypedEvent<
  [boolean],
  BrgHoldingIncentiveStatusChangedEventObject
>;

export type BrgHoldingIncentiveStatusChangedEventFilter =
  TypedEventFilter<BrgHoldingIncentiveStatusChangedEvent>;

export interface BrgHoldingIncentiveUpdatedEventObject {
  prevBrgHoldingIncentive: BigNumber;
  newBrgHoldingIncentive: BigNumber;
}
export type BrgHoldingIncentiveUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BrgHoldingIncentiveUpdatedEventObject
>;

export type BrgHoldingIncentiveUpdatedEventFilter =
  TypedEventFilter<BrgHoldingIncentiveUpdatedEvent>;

export interface BrgHoldingThresholdUpdatedEventObject {
  prevBrgHoldingThreshold: BigNumber;
  newBrgHoldingThreshold: BigNumber;
}
export type BrgHoldingThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  BrgHoldingThresholdUpdatedEventObject
>;

export type BrgHoldingThresholdUpdatedEventFilter =
  TypedEventFilter<BrgHoldingThresholdUpdatedEvent>;

export interface UserIncentiveUpdateEventObject {
  user: string;
  previousIncentive: BigNumber;
  currentIncentive: BigNumber;
}
export type UserIncentiveUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UserIncentiveUpdateEventObject
>;

export type UserIncentiveUpdateEventFilter =
  TypedEventFilter<UserIncentiveUpdateEvent>;

export interface userExemptStatusChangedEventObject {
  user: string;
  status: boolean;
}
export type userExemptStatusChangedEvent = TypedEvent<
  [string, boolean],
  userExemptStatusChangedEventObject
>;

export type userExemptStatusChangedEventFilter =
  TypedEventFilter<userExemptStatusChangedEvent>;

export interface FeeController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateAddressExemption(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateBrgHoldingIncentive(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activateIndexedTokenIncentive(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    deActivateIndexedTokenIncentive(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exemptAddress(
      user: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBridgeFee(
      sender: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isExempted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    settings(overrides?: CallOverrides): Promise<[string]>;

    updatIndexedTokenIncentivePercentage(
      asset: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenHoldingIncentivePercentage(
      tokenHoldingLevel: PromiseOrValue<BytesLike>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenHoldingIncentiveThreshold(
      tokenHoldingLevel: PromiseOrValue<BytesLike>,
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateUserExemptionPercentage(
      user: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    useExemption(overrides?: CallOverrides): Promise<[boolean]>;

    useHolderIncentive(overrides?: CallOverrides): Promise<[boolean]>;
  };

  activateAddressExemption(
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateBrgHoldingIncentive(
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activateIndexedTokenIncentive(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  deActivateIndexedTokenIncentive(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exemptAddress(
    user: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBridgeFee(
    sender: PromiseOrValue<string>,
    asset: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isExempted(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  settings(overrides?: CallOverrides): Promise<string>;

  updatIndexedTokenIncentivePercentage(
    asset: PromiseOrValue<string>,
    percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenHoldingIncentivePercentage(
    tokenHoldingLevel: PromiseOrValue<BytesLike>,
    percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenHoldingIncentiveThreshold(
    tokenHoldingLevel: PromiseOrValue<BytesLike>,
    threshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateUserExemptionPercentage(
    user: PromiseOrValue<string>,
    percentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  useExemption(overrides?: CallOverrides): Promise<boolean>;

  useHolderIncentive(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    activateAddressExemption(
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    activateBrgHoldingIncentive(
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    activateIndexedTokenIncentive(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    deActivateIndexedTokenIncentive(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    exemptAddress(
      user: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBridgeFee(
      sender: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExempted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    settings(overrides?: CallOverrides): Promise<string>;

    updatIndexedTokenIncentivePercentage(
      asset: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenHoldingIncentivePercentage(
      tokenHoldingLevel: PromiseOrValue<BytesLike>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenHoldingIncentiveThreshold(
      tokenHoldingLevel: PromiseOrValue<BytesLike>,
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUserExemptionPercentage(
      user: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    useExemption(overrides?: CallOverrides): Promise<boolean>;

    useHolderIncentive(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "AddressExemptionStatusChanged(bool)"(
      status?: null
    ): AddressExemptionStatusChangedEventFilter;
    AddressExemptionStatusChanged(
      status?: null
    ): AddressExemptionStatusChangedEventFilter;

    "AssetIncentiveStatusChanged(bool)"(
      status?: null
    ): AssetIncentiveStatusChangedEventFilter;
    AssetIncentiveStatusChanged(
      status?: null
    ): AssetIncentiveStatusChangedEventFilter;

    "AssetIncentiveUpdated(address,uint256,uint256)"(
      asset?: PromiseOrValue<string> | null,
      oldIncentive?: null,
      newIncentive?: null
    ): AssetIncentiveUpdatedEventFilter;
    AssetIncentiveUpdated(
      asset?: PromiseOrValue<string> | null,
      oldIncentive?: null,
      newIncentive?: null
    ): AssetIncentiveUpdatedEventFilter;

    "BrgHoldingIncentiveStatusChanged(bool)"(
      status?: null
    ): BrgHoldingIncentiveStatusChangedEventFilter;
    BrgHoldingIncentiveStatusChanged(
      status?: null
    ): BrgHoldingIncentiveStatusChangedEventFilter;

    "BrgHoldingIncentiveUpdated(uint256,uint256)"(
      prevBrgHoldingIncentive?: null,
      newBrgHoldingIncentive?: null
    ): BrgHoldingIncentiveUpdatedEventFilter;
    BrgHoldingIncentiveUpdated(
      prevBrgHoldingIncentive?: null,
      newBrgHoldingIncentive?: null
    ): BrgHoldingIncentiveUpdatedEventFilter;

    "BrgHoldingThresholdUpdated(uint256,uint256)"(
      prevBrgHoldingThreshold?: null,
      newBrgHoldingThreshold?: null
    ): BrgHoldingThresholdUpdatedEventFilter;
    BrgHoldingThresholdUpdated(
      prevBrgHoldingThreshold?: null,
      newBrgHoldingThreshold?: null
    ): BrgHoldingThresholdUpdatedEventFilter;

    "UserIncentiveUpdate(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      previousIncentive?: null,
      currentIncentive?: null
    ): UserIncentiveUpdateEventFilter;
    UserIncentiveUpdate(
      user?: PromiseOrValue<string> | null,
      previousIncentive?: null,
      currentIncentive?: null
    ): UserIncentiveUpdateEventFilter;

    "userExemptStatusChanged(address,bool)"(
      user?: null,
      status?: null
    ): userExemptStatusChangedEventFilter;
    userExemptStatusChanged(
      user?: null,
      status?: null
    ): userExemptStatusChangedEventFilter;
  };

  estimateGas: {
    activateAddressExemption(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateBrgHoldingIncentive(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activateIndexedTokenIncentive(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    deActivateIndexedTokenIncentive(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exemptAddress(
      user: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBridgeFee(
      sender: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExempted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    updatIndexedTokenIncentivePercentage(
      asset: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenHoldingIncentivePercentage(
      tokenHoldingLevel: PromiseOrValue<BytesLike>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenHoldingIncentiveThreshold(
      tokenHoldingLevel: PromiseOrValue<BytesLike>,
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateUserExemptionPercentage(
      user: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    useExemption(overrides?: CallOverrides): Promise<BigNumber>;

    useHolderIncentive(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateAddressExemption(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateBrgHoldingIncentive(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activateIndexedTokenIncentive(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deActivateIndexedTokenIncentive(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exemptAddress(
      user: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBridgeFee(
      sender: PromiseOrValue<string>,
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExempted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatIndexedTokenIncentivePercentage(
      asset: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenHoldingIncentivePercentage(
      tokenHoldingLevel: PromiseOrValue<BytesLike>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenHoldingIncentiveThreshold(
      tokenHoldingLevel: PromiseOrValue<BytesLike>,
      threshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateUserExemptionPercentage(
      user: PromiseOrValue<string>,
      percentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    useExemption(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    useHolderIncentive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
