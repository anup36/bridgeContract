/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface RegistryInterface extends utils.Interface {
  functions: {
    "TransactionValidators(bytes32,uint256)": FunctionFragment;
    "assetChainBalance(address,uint256)": FunctionFragment;
    "assetTotalTransactionCount(address)": FunctionFragment;
    "assetTransactionTypeCount(address,uint256)": FunctionFragment;
    "burnTransactions(bytes32)": FunctionFragment;
    "claimTransactions(bytes32)": FunctionFragment;
    "completeBurnTransaction(bytes32)": FunctionFragment;
    "completeClaimTransaction(bytes32)": FunctionFragment;
    "completeMintTransaction(bytes32)": FunctionFragment;
    "completeSendTransaction(bytes32)": FunctionFragment;
    "getEthSignedMessageHash(uint256,uint256,address,uint256,address,uint256)": FunctionFragment;
    "getID(uint256,uint256,address,uint256,address,uint256)": FunctionFragment;
    "getSigner(uint256,uint256,address,uint256,address,uint256,bytes)": FunctionFragment;
    "getUserNonce(address)": FunctionFragment;
    "hasValidatedTransaction(bytes32,address)": FunctionFragment;
    "isClaimTransaction(bytes32)": FunctionFragment;
    "isMintTransaction(bytes32)": FunctionFragment;
    "isSendTransaction(bytes32)": FunctionFragment;
    "isburnTransaction(bytes32)": FunctionFragment;
    "migrateAssetChainBalance(address,uint256,uint256)": FunctionFragment;
    "mintTransactions(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverSigner(bytes32,bytes)": FunctionFragment;
    "registerClaimTransaction(bytes32,uint256,address,uint256,address,uint256)": FunctionFragment;
    "registerMintTransaction(bytes32,uint256,address,uint256,address,uint256)": FunctionFragment;
    "registerTransaction(uint256,address,uint256,address,uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendTransactions(bytes32)": FunctionFragment;
    "splitSignature(bytes)": FunctionFragment;
    "totalTransactions()": FunctionFragment;
    "transactionValidated(bytes32)": FunctionFragment;
    "transactionValidations(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validateTransaction(bytes32,bytes[],bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TransactionValidators"
      | "assetChainBalance"
      | "assetTotalTransactionCount"
      | "assetTransactionTypeCount"
      | "burnTransactions"
      | "claimTransactions"
      | "completeBurnTransaction"
      | "completeClaimTransaction"
      | "completeMintTransaction"
      | "completeSendTransaction"
      | "getEthSignedMessageHash"
      | "getID"
      | "getSigner"
      | "getUserNonce"
      | "hasValidatedTransaction"
      | "isClaimTransaction"
      | "isMintTransaction"
      | "isSendTransaction"
      | "isburnTransaction"
      | "migrateAssetChainBalance"
      | "mintTransactions"
      | "owner"
      | "recoverSigner"
      | "registerClaimTransaction"
      | "registerMintTransaction"
      | "registerTransaction"
      | "renounceOwnership"
      | "sendTransactions"
      | "splitSignature"
      | "totalTransactions"
      | "transactionValidated"
      | "transactionValidations"
      | "transferOwnership"
      | "validateTransaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TransactionValidators",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetChainBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetTotalTransactionCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetTransactionTypeCount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnTransactions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTransactions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeBurnTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeClaimTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeMintTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSendTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSignedMessageHash",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getID",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigner",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasValidatedTransaction",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSendTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isburnTransaction",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateAssetChainBalance",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTransactions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverSigner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerClaimTransaction",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerMintTransaction",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTransactions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "splitSignature",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionValidated",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionValidations",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTransaction",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "TransactionValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetChainBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTotalTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetTransactionTypeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeBurnTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeClaimTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeMintTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSendTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasValidatedTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSendTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isburnTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateAssetChainBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerClaimTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerMintTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionValidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionValidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTransaction",
    data: BytesLike
  ): Result;

  events: {
    "BurnTransactionCompleted(bytes32)": EventFragment;
    "ClaimTransactionCompleted(bytes32)": EventFragment;
    "MintTransactionCompleted(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SendTransactionCompleted(bytes32)": EventFragment;
    "TransactionValidated(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BurnTransactionCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimTransactionCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintTransactionCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SendTransactionCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionValidated"): EventFragment;
}

export interface BurnTransactionCompletedEventObject {
  transactionID: string;
}
export type BurnTransactionCompletedEvent = TypedEvent<
  [string],
  BurnTransactionCompletedEventObject
>;

export type BurnTransactionCompletedEventFilter =
  TypedEventFilter<BurnTransactionCompletedEvent>;

export interface ClaimTransactionCompletedEventObject {
  transactionID: string;
}
export type ClaimTransactionCompletedEvent = TypedEvent<
  [string],
  ClaimTransactionCompletedEventObject
>;

export type ClaimTransactionCompletedEventFilter =
  TypedEventFilter<ClaimTransactionCompletedEvent>;

export interface MintTransactionCompletedEventObject {
  transactionID: string;
}
export type MintTransactionCompletedEvent = TypedEvent<
  [string],
  MintTransactionCompletedEventObject
>;

export type MintTransactionCompletedEventFilter =
  TypedEventFilter<MintTransactionCompletedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SendTransactionCompletedEventObject {
  transactionID: string;
}
export type SendTransactionCompletedEvent = TypedEvent<
  [string],
  SendTransactionCompletedEventObject
>;

export type SendTransactionCompletedEventFilter =
  TypedEventFilter<SendTransactionCompletedEvent>;

export interface TransactionValidatedEventObject {
  transactionID: string;
}
export type TransactionValidatedEvent = TypedEvent<
  [string],
  TransactionValidatedEventObject
>;

export type TransactionValidatedEventFilter =
  TypedEventFilter<TransactionValidatedEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TransactionValidators(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    assetChainBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetTotalTransactionCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetTransactionTypeCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    burnTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        chainId: BigNumber;
        assetAddress: string;
        amount: BigNumber;
        receiver: string;
        nounce: BigNumber;
        isCompleted: boolean;
      }
    >;

    claimTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        chainId: BigNumber;
        assetAddress: string;
        amount: BigNumber;
        receiver: string;
        nounce: BigNumber;
        isCompleted: boolean;
      }
    >;

    completeBurnTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeClaimTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeMintTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeSendTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getEthSignedMessageHash(
      chainID: PromiseOrValue<BigNumberish>,
      interfacingChainId: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getID(
      chainFrom: PromiseOrValue<BigNumberish>,
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSigner(
      chainID: PromiseOrValue<BigNumberish>,
      interfacingChainId: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasValidatedTransaction(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isClaimTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMintTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSendTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isburnTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    migrateAssetChainBalance(
      asset: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        chainId: BigNumber;
        assetAddress: string;
        amount: BigNumber;
        receiver: string;
        nounce: BigNumber;
        isCompleted: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recoverSigner(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerClaimTransaction(
      claimID: PromiseOrValue<BytesLike>,
      chainFrom: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerMintTransaction(
      mintID: PromiseOrValue<BytesLike>,
      chainFrom: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerTransaction(
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        chainId: BigNumber;
        assetAddress: string;
        amount: BigNumber;
        receiver: string;
        nounce: BigNumber;
        isCompleted: boolean;
      }
    >;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    totalTransactions(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactionValidated(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transactionValidations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { validationCount: BigNumber; validated: boolean }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTransaction(
      transactionId: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      mintable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  TransactionValidators(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  assetChainBalance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetTotalTransactionCount(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetTransactionTypeCount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burnTransactions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
      chainId: BigNumber;
      assetAddress: string;
      amount: BigNumber;
      receiver: string;
      nounce: BigNumber;
      isCompleted: boolean;
    }
  >;

  claimTransactions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
      chainId: BigNumber;
      assetAddress: string;
      amount: BigNumber;
      receiver: string;
      nounce: BigNumber;
      isCompleted: boolean;
    }
  >;

  completeBurnTransaction(
    transactionID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeClaimTransaction(
    transactionID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeMintTransaction(
    transactionID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeSendTransaction(
    transactionID: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getEthSignedMessageHash(
    chainID: PromiseOrValue<BigNumberish>,
    interfacingChainId: PromiseOrValue<BigNumberish>,
    assetAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    nounce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getID(
    chainFrom: PromiseOrValue<BigNumberish>,
    chainTo: PromiseOrValue<BigNumberish>,
    assetAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    nounce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSigner(
    chainID: PromiseOrValue<BigNumberish>,
    interfacingChainId: PromiseOrValue<BigNumberish>,
    assetAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    nounce: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserNonce(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasValidatedTransaction(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isClaimTransaction(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMintTransaction(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSendTransaction(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isburnTransaction(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  migrateAssetChainBalance(
    asset: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    balance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintTransactions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
      chainId: BigNumber;
      assetAddress: string;
      amount: BigNumber;
      receiver: string;
      nounce: BigNumber;
      isCompleted: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  recoverSigner(
    _ethSignedMessageHash: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerClaimTransaction(
    claimID: PromiseOrValue<BytesLike>,
    chainFrom: PromiseOrValue<BigNumberish>,
    assetAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    nounce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerMintTransaction(
    mintID: PromiseOrValue<BytesLike>,
    chainFrom: PromiseOrValue<BigNumberish>,
    assetAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    nounce: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerTransaction(
    chainTo: PromiseOrValue<BigNumberish>,
    assetAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    _transactionType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendTransactions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
      chainId: BigNumber;
      assetAddress: string;
      amount: BigNumber;
      receiver: string;
      nounce: BigNumber;
      isCompleted: boolean;
    }
  >;

  splitSignature(
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

  totalTransactions(overrides?: CallOverrides): Promise<BigNumber>;

  transactionValidated(
    transactionID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transactionValidations(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { validationCount: BigNumber; validated: boolean }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTransaction(
    transactionId: PromiseOrValue<BytesLike>,
    signatures: PromiseOrValue<BytesLike>[],
    mintable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TransactionValidators(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    assetChainBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetTotalTransactionCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetTransactionTypeCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        chainId: BigNumber;
        assetAddress: string;
        amount: BigNumber;
        receiver: string;
        nounce: BigNumber;
        isCompleted: boolean;
      }
    >;

    claimTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        chainId: BigNumber;
        assetAddress: string;
        amount: BigNumber;
        receiver: string;
        nounce: BigNumber;
        isCompleted: boolean;
      }
    >;

    completeBurnTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeClaimTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeMintTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeSendTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getEthSignedMessageHash(
      chainID: PromiseOrValue<BigNumberish>,
      interfacingChainId: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getID(
      chainFrom: PromiseOrValue<BigNumberish>,
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSigner(
      chainID: PromiseOrValue<BigNumberish>,
      interfacingChainId: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasValidatedTransaction(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isClaimTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMintTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSendTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isburnTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    migrateAssetChainBalance(
      asset: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        chainId: BigNumber;
        assetAddress: string;
        amount: BigNumber;
        receiver: string;
        nounce: BigNumber;
        isCompleted: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    recoverSigner(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerClaimTransaction(
      claimID: PromiseOrValue<BytesLike>,
      chainFrom: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerMintTransaction(
      mintID: PromiseOrValue<BytesLike>,
      chainFrom: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerTransaction(
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { transactionID: string; nounce: BigNumber }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, boolean] & {
        chainId: BigNumber;
        assetAddress: string;
        amount: BigNumber;
        receiver: string;
        nounce: BigNumber;
        isCompleted: boolean;
      }
    >;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    totalTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    transactionValidated(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transactionValidations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { validationCount: BigNumber; validated: boolean }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateTransaction(
      transactionId: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      mintable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BurnTransactionCompleted(bytes32)"(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): BurnTransactionCompletedEventFilter;
    BurnTransactionCompleted(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): BurnTransactionCompletedEventFilter;

    "ClaimTransactionCompleted(bytes32)"(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): ClaimTransactionCompletedEventFilter;
    ClaimTransactionCompleted(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): ClaimTransactionCompletedEventFilter;

    "MintTransactionCompleted(bytes32)"(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): MintTransactionCompletedEventFilter;
    MintTransactionCompleted(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): MintTransactionCompletedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SendTransactionCompleted(bytes32)"(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): SendTransactionCompletedEventFilter;
    SendTransactionCompleted(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): SendTransactionCompletedEventFilter;

    "TransactionValidated(bytes32)"(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): TransactionValidatedEventFilter;
    TransactionValidated(
      transactionID?: PromiseOrValue<BytesLike> | null
    ): TransactionValidatedEventFilter;
  };

  estimateGas: {
    TransactionValidators(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetChainBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetTotalTransactionCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetTransactionTypeCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burnTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    completeBurnTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeClaimTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeMintTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeSendTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getEthSignedMessageHash(
      chainID: PromiseOrValue<BigNumberish>,
      interfacingChainId: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getID(
      chainFrom: PromiseOrValue<BigNumberish>,
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSigner(
      chainID: PromiseOrValue<BigNumberish>,
      interfacingChainId: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasValidatedTransaction(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isClaimTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMintTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSendTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isburnTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    migrateAssetChainBalance(
      asset: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recoverSigner(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerClaimTransaction(
      claimID: PromiseOrValue<BytesLike>,
      chainFrom: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerMintTransaction(
      mintID: PromiseOrValue<BytesLike>,
      chainFrom: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerTransaction(
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    transactionValidated(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionValidations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTransaction(
      transactionId: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      mintable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TransactionValidators(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetChainBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetTotalTransactionCount(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetTransactionTypeCount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burnTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    completeBurnTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeClaimTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeMintTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeSendTransaction(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getEthSignedMessageHash(
      chainID: PromiseOrValue<BigNumberish>,
      interfacingChainId: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getID(
      chainFrom: PromiseOrValue<BigNumberish>,
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSigner(
      chainID: PromiseOrValue<BigNumberish>,
      interfacingChainId: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNonce(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasValidatedTransaction(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isClaimTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMintTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSendTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isburnTransaction(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrateAssetChainBalance(
      asset: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      balance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverSigner(
      _ethSignedMessageHash: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerClaimTransaction(
      claimID: PromiseOrValue<BytesLike>,
      chainFrom: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerMintTransaction(
      mintID: PromiseOrValue<BytesLike>,
      chainFrom: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      nounce: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerTransaction(
      chainTo: PromiseOrValue<BigNumberish>,
      assetAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      _transactionType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendTransactions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalTransactions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactionValidated(
      transactionID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionValidations(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTransaction(
      transactionId: PromiseOrValue<BytesLike>,
      signatures: PromiseOrValue<BytesLike>[],
      mintable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
